
IDENTIFICATION DIVISION.
PROGRAM-ID. CLOCK-SIGNAL.

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT INPUT-FILE ASSIGN TO "input.txt"
    ORGANIZATION IS LINE SEQUENTIAL.

DATA DIVISION.
FILE SECTION.
FD INPUT-FILE.
01 INPUT-RECORD PIC X(80).

WORKING-STORAGE SECTION.
* File Status
01 WS-EOF-FLAG PIC X VALUE 'N'.
   88 WS-EOF VALUE 'Y'.

* Instruction Storage
01 WS-INSTRUCTIONS-TABLE.
   05 WS-INSTRUCTION OCCURS 500 TIMES INDEXED BY WS-INSTR-IDX.
      10 WS-INSTR-LINE PIC X(20).
01 WS-INSTR-COUNT PIC 9(3) VALUE 0.

* Registers
01 WS-REGISTERS.
   05 WS-REG-A PIC S9(9) COMP-5.
   05 WS-REG-B PIC S9(9) COMP-5.
   05 WS-REG-C PIC S9(9) COMP-5.
   05 WS-REG-D PIC S9(9) COMP-5.

* Program Counter
01 WS-PC PIC 9(3) COMP-5.

* Instruction Parsing
01 WS-CURRENT-INSTR PIC X(20).
01 WS-OPCODE PIC X(5).
01 WS-OPERAND1 PIC X(10).
01 WS-OPERAND2 PIC X(10).
01 WS-DELIMITER PIC X VALUE SPACE.
01 WS-PTR PIC 9(3) VALUE 1.
01 WS-COUNT PIC 9(3).
01 WS-NUM-VAL PIC S9(9) COMP-5.

* Clock Signal
01 WS-CLOCK-SIGNAL-TABLE.
   05 WS-CLOCK-VALUE OCCURS 10 TIMES INDEXED BY WS-CLOCK-IDX.
      10 WS-CLOCK-ITEM PIC 9.
01 WS-CLOCK-COUNT PIC 9(2) VALUE 0.

* Loop Control
01 WS-A-VALUE PIC S9(9) COMP-5 VALUE 0.
01 WS-FOUND-A PIC X VALUE 'N'.
   88 WS-A-FOUND VALUE 'Y'.
01 WS-RUN-CODE-RESULT PIC X.
   88 WS-RUN-CODE-SUCCESS VALUE 'Y'.
   88 WS-RUN-CODE-FAILURE VALUE 'N'.

PROCEDURE DIVISION.

MAIN-LOGIC SECTION.
    PERFORM 1000-READ-INPUT-FILE.
    PERFORM 2000-FIND-A-VALUE UNTIL WS-A-FOUND.
    DISPLAY WS-A-VALUE.
    STOP RUN.

1000-READ-INPUT-FILE.
    OPEN INPUT INPUT-FILE.
    PERFORM UNTIL WS-EOF
        READ INPUT-FILE INTO WS-INPUT-RECORD
            AT END SET WS-EOF TO TRUE
            NOT AT END
                ADD 1 TO WS-INSTR-COUNT
                MOVE WS-INPUT-RECORD TO WS-INSTRUCTION(WS-INSTR-COUNT)
        END-READ
    END-PERFORM.
    CLOSE INPUT-FILE.

2000-FIND-A-VALUE.
    MOVE WS-A-VALUE TO WS-REG-A.
    MOVE 0 TO WS-REG-B WS-REG-C WS-REG-D.
    MOVE 0 TO WS-CLOCK-COUNT.
    MOVE 1 TO WS-PC.
    PERFORM 3000-RUN-CODE.
    IF WS-RUN-CODE-SUCCESS
        SET WS-A-FOUND TO TRUE
    ELSE
        ADD 1 TO WS-A-VALUE
    END-IF.

3000-RUN-CODE.
    SET WS-RUN-CODE-FAILURE TO TRUE.
    PERFORM UNTIL WS-PC > WS-INSTR-COUNT OR WS-RUN-CODE-SUCCESS OR WS-RUN-CODE-FAILURE
        MOVE WS-INSTRUCTION(WS-PC) TO WS-CURRENT-INSTR.
        MOVE 1 TO WS-PTR.
        UNSTRING WS-CURRENT-INSTR DELIMITED BY SPACE
            INTO WS-OPCODE WS-OPERAND1 WS-OPERAND2
            WITH POINTER WS-PTR
            COUNT IN WS-COUNT
        END-UNSTRING.

        EVALUATE WS-OPCODE
            WHEN 'cpy'
                PERFORM 3100-HANDLE-CPY
            WHEN 'inc'
                PERFORM 3200-HANDLE-INC
            WHEN 'dec'
                PERFORM 3300-HANDLE-DEC
            WHEN 'jnz'
                PERFORM 3400-HANDLE-JNZ
            WHEN 'out'
                PERFORM 3500-HANDLE-OUT
            WHEN OTHER
                SET WS-RUN-CODE-FAILURE TO TRUE
        END-EVALUATE.

        IF NOT WS-RUN-CODE-SUCCESS AND NOT WS-RUN-CODE-FAILURE
            ADD 1 TO WS-PC
        END-IF.
    END-PERFORM.

3100-HANDLE-CPY.
    IF WS-OPERAND1 IS NUMERIC OR
       (WS-OPERAND1(1:1) = '-' AND WS-OPERAND1(2:) IS NUMERIC)
        COMPUTE WS-NUM-VAL = FUNCTION NUMVAL(WS-OPERAND1)
        PERFORM 3110-ASSIGN-REGISTER USING WS-OPERAND2 WS-NUM-VAL
    ELSE
        PERFORM 3120-GET-REGISTER-VALUE USING WS-OPERAND1
        PERFORM 3110-ASSIGN-REGISTER USING WS-OPERAND2 WS-NUM-VAL
    END-IF.

3110-ASSIGN-REGISTER SECTION USING REG-CHAR-IN, VALUE-IN.
    01 REG-CHAR-IN PIC X.
    01 VALUE-IN PIC S9(9) COMP-5.
    EVALUATE REG-CHAR-IN
        WHEN 'a' MOVE VALUE-IN TO WS-REG-A
        WHEN 'b' MOVE VALUE-IN TO WS-REG-B
        WHEN 'c' MOVE VALUE-IN TO WS-REG-C
        WHEN 'd' MOVE VALUE-IN TO WS-REG-D
    END-EVALUATE.

3120-GET-REGISTER-VALUE SECTION USING REG-CHAR-IN.
    01 REG-CHAR-IN PIC X.
    EVALUATE REG-CHAR-IN
        WHEN 'a' MOVE WS-REG-A TO WS-NUM-VAL
        WHEN 'b' MOVE WS-REG-B TO WS-NUM-VAL
        WHEN 'c' MOVE WS-REG-C TO WS-NUM-VAL
        WHEN 'd' MOVE WS-REG-D TO WS-NUM-VAL
    END-EVALUATE.

3200-HANDLE-INC.
    PERFORM 3120-GET-REGISTER-VALUE USING WS-OPERAND1.
    ADD 1 TO WS-NUM-VAL.
    PERFORM 3110-ASSIGN-REGISTER USING WS-OPERAND1 WS-NUM-VAL.

3300-HANDLE-DEC.
    PERFORM 3120-GET-REGISTER-VALUE USING WS-OPERAND1.
    SUBTRACT 1 FROM WS-NUM-VAL.
    PERFORM 3110-ASSIGN-REGISTER USING WS-OPERAND1 WS-NUM-VAL.

3400-HANDLE-JNZ.
    IF WS-OPERAND1 IS NUMERIC OR
       (WS-OPERAND1(1:1) = '-' AND WS-OPERAND1(2:) IS NUMERIC)
        COMPUTE WS-NUM-VAL = FUNCTION NUMVAL(WS-OPERAND1)
    ELSE
        PERFORM 3120-GET-REGISTER-VALUE USING WS-OPERAND1
    END-IF.

    IF WS-NUM-VAL NOT EQUAL 0
        COMPUTE WS-NUM-VAL = FUNCTION NUMVAL(WS-OPERAND2)
        ADD WS-NUM-VAL TO WS-PC
        SUBTRACT 1 FROM WS-PC * Adjust for the automatic ADD 1 TO WS-PC later
    END-IF.

3500-HANDLE-OUT.
    IF WS-OPERAND1 IS NUMERIC OR
       (WS-OPERAND1(1:1) = '-' AND WS-OPERAND1(2:) IS NUMERIC)
        COMPUTE WS-NUM-VAL = FUNCTION NUMVAL(WS-OPERAND1)
    ELSE
        PERFORM 3120-GET-REGISTER-VALUE USING WS-OPERAND1
    END-IF.

    ADD 1 TO WS-CLOCK-COUNT.

    IF WS-CLOCK-COUNT > 10
        SET WS-RUN-CODE-FAILURE TO TRUE
        EXIT PARAGRAPH
    END-IF.

    MOVE WS-NUM-VAL TO WS-CLOCK-ITEM(WS-CLOCK-COUNT).

    IF WS-CLOCK-COUNT > 1
        IF WS-CLOCK-ITEM(WS-CLOCK-COUNT) = WS-CLOCK-ITEM(WS-CLOCK-COUNT - 1)
            SET WS-RUN-CODE-FAILURE TO TRUE
            EXIT PARAGRAPH
        END-IF.
    END-IF.

    IF WS-CLOCK-COUNT = 10
        SET WS-RUN-CODE-SUCCESS TO TRUE
        EXIT PARAGRAPH
    END-IF.
