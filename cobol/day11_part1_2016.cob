
IDENTIFICATION DIVISION.
PROGRAM-ID. RadioisotopeThermoelectric.
AUTHOR. Expert Programmer.

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT INPUT-FILE ASSIGN TO "input.txt"
        ORGANIZATION IS LINE SEQUENTIAL.

DATA DIVISION.
FILE SECTION.
FD  INPUT-FILE.
01  INPUT-RECORD PIC X(256).

WORKING-STORAGE SECTION.
01  CONSTANTS.
    05  MAX-FLOORS         PIC 9(1) VALUE 4.
    05  MAX-MATERIALS      PIC 9(2) VALUE 7.
    05  MAX-ITEMS          PIC 9(2) VALUE 14.
    05  QUEUE-CAPACITY     PIC 9(7) VALUE 200000.
    05  VISITED-CAPACITY   PIC 9(7) VALUE 1000000.
    05  GENERATOR-TYPE     PIC 9(1) VALUE 0.
    05  CHIP-TYPE          PIC 9(1) VALUE 1.

01  STATE-RECORD.
    05  ELEVATOR-LEVEL     PIC 9(1).
    05  STEPS              PIC 9(4).
    05  NUM-MATERIALS      PIC 9(2).
    05  FLOORS OCCURS MAX-FLOORS TIMES.
        10  FLOOR-COUNT    PIC 9(2) COMP-5.
        10  ITEMS OCCURS MAX-ITEMS TIMES.
            15  MATERIAL-ID    PIC 9(2).
            15  IS-CHIP        PIC 9(1).

01  CURRENT-STATE          LIKE STATE-RECORD.
01  NEXT-STATE             LIKE STATE-RECORD.
01  INITIAL-STATE          LIKE STATE-RECORD.

01  QUEUE-AREA.
    05  QUEUE-TABLE OCCURS QUEUE-CAPACITY TIMES.
        10  QUEUE-STATE    LIKE STATE-RECORD.
    05  QUEUE-START        PIC 9(9) COMP-5 VALUE 1.
    05  QUEUE-END          PIC 9(9) COMP-5 VALUE 0.

01  VISITED-SET.
    05  VISITED-COUNT      PIC 9(9) COMP-5 VALUE 0.
    05  VISITED-TABLE OCCURS VISITED-CAPACITY TIMES
            ASCENDING KEY IS VISITED-HASH
            INDEXED BY V-IDX.
        10  VISITED-HASH   PIC S9(18) COMP-5.

01  HASH-WORK-AREA.
    05  CURRENT-HASH       PIC S9(18) COMP-5.
    05  FLOOR-PAIRS-TABLE OCCURS MAX-MATERIALS TIMES
            ASCENDING KEY IS GEN-FLOOR, CHIP-FLOOR.
        10  GEN-FLOOR      PIC 9(1).
        10  CHIP-FLOOR     PIC 9(1).

01  MATERIAL-DB.
    05  MATERIAL-COUNT     PIC 9(2) COMP-5 VALUE 0.
    05  MATERIALS OCCURS MAX-MATERIALS TIMES.
        10  MATERIAL-NAME  PIC X(20).

01  PARSER-VARS.
    05  WS-LINE            PIC X(256).
    05  WS-EOF             PIC X(1) VALUE 'N'.
    05  CURRENT-FLOOR-IDX  PIC 9(1).
    05  WORD-PTR           PIC 9(2).
    05  WORDS OCCURS 30 TIMES PIC X(20).
    05  MATERIAL-BUFFER    PIC X(20).

01  FLAGS-AND-SWITCHES.
    05  IS-VALID-FLAG      PIC X(1).
    05  IS-VISITED-FLAG    PIC X(1).

01  LOOP-COUNTERS.
    05  I                  PIC 9(9) COMP-5.
    05  J                  PIC 9(9) COMP-5.
    05  D                  PIC 9(9) COMP-5.
    05  M                  PIC 9(9) COMP-5.
    05  F                  PIC 9(9) COMP-5.
    05  ITEM-IDX-1         PIC 9(2).
    05  ITEM-IDX-2         PIC 9(2).
    05  ELEV-DIFF          PIC S9(1).
    05  NEXT-LEVEL         PIC 9(1).
    05  TEMP-ID            PIC 9(2).

PROCEDURE DIVISION.
MAIN-PROCEDURE.
    PERFORM INITIALIZE-STATE-DATA.
    PERFORM PARSE-INPUT.
    PERFORM BFS-LOOP UNTIL QUEUE-START > QUEUE-END.
    DISPLAY "No solution found.".
    STOP RUN.

INITIALIZE-STATE-DATA.
    INITIALIZE INITIAL-STATE.
    MOVE 1 TO ELEVATOR-LEVEL IN INITIAL-STATE.

PARSE-INPUT.
    OPEN INPUT INPUT-FILE.
    PERFORM VARYING CURRENT-FLOOR-IDX FROM 1 BY 1
        UNTIL WS-EOF = 'Y' OR CURRENT-FLOOR-IDX > MAX-FLOORS
        READ INPUT-FILE INTO WS-LINE
            AT END MOVE 'Y' TO WS-EOF
            NOT AT END PERFORM PARSE-LINE
        END-READ
    END-PERFORM.
    CLOSE INPUT-FILE.

    MOVE MATERIAL-COUNT TO NUM-MATERIALS IN INITIAL-STATE.
    MOVE INITIAL-STATE TO CURRENT-STATE.
    PERFORM ENQUEUE.
    PERFORM CALCULATE-HASH USING CURRENT-STATE GIVING CURRENT-HASH.
    PERFORM ADD-VISITED.

PARSE-LINE.
    MOVE SPACES TO MATERIAL-BUFFER.
    UNSTRING WS-LINE DELIMITED BY ALL " " OR "," OR "-" OR "."
        INTO WORDS(1) WORDS(2) WORDS(3) WORDS(4) WORDS(5)
             WORDS(6) WORDS(7) WORDS(8) WORDS(9) WORDS(10)
             WORDS(11) WORDS(12) WORDS(13) WORDS(14) WORDS(15)
             WORDS(16) WORDS(17) WORDS(18) WORDS(19) WORDS(20)
             WORDS(21) WORDS(22) WORDS(23) WORDS(24) WORDS(25)
             WORDS(26) WORDS(27) WORDS(28) WORDS(29) WORDS(30)
    END-UNSTRING.

    PERFORM VARYING WORD-PTR FROM 1 BY 1 UNTIL WORD-PTR > 30
        EVALUATE WORDS(WORD-PTR)
            WHEN "generator"
                PERFORM ADD-ITEM-TO-STATE
                    WITH GENERATOR-TYPE, MATERIAL-BUFFER
            WHEN "microchip"
                PERFORM ADD-ITEM-TO-STATE
                    WITH CHIP-TYPE, MATERIAL-BUFFER
            WHEN "a" OR "and" OR "compatible" OR "contains" OR
                 "first" OR "floor" OR "fourth" OR "nothing" OR
                 "relevant" OR "second" OR "The" OR "third"
                CONTINUE
            WHEN OTHER
                MOVE WORDS(WORD-PTR) TO MATERIAL-BUFFER
        END-EVALUATE
    END-PERFORM.

ADD-ITEM-TO-STATE USING ITEM-TYPE, ITEM-MATERIAL.
    DECLARE ITEM-TYPE PIC 9(1).
    DECLARE ITEM-MATERIAL PIC X(20).
    PERFORM FIND-OR-ADD-MATERIAL
        USING ITEM-MATERIAL GIVING TEMP-ID.
    ADD 1 TO FLOOR-COUNT IN INITIAL-STATE(CURRENT-FLOOR-IDX).
    MOVE TEMP-ID TO MATERIAL-ID IN
        ITEMS IN INITIAL-STATE(CURRENT-FLOOR-IDX,
        FLOOR-COUNT IN INITIAL-STATE(CURRENT-FLOOR-IDX)).
    MOVE ITEM-TYPE TO IS-CHIP IN
        ITEMS IN INITIAL-STATE(CURRENT-FLOOR-IDX,
        FLOOR-COUNT IN INITIAL-STATE(CURRENT-FLOOR-IDX)).

FIND-OR-ADD-MATERIAL USING IN-MATERIAL-NAME, OUT-MATERIAL-ID.
    DECLARE IN-MATERIAL-NAME PIC X(20).
    DECLARE OUT-MATERIAL-ID PIC 9(2).
    MOVE 0 TO OUT-MATERIAL-ID.
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > MATERIAL-COUNT
        IF MATERIAL-NAME(I) = IN-MATERIAL-NAME
            MOVE I TO OUT-MATERIAL-ID
            EXIT PERFORM
        END-IF
    END-PERFORM.
    IF OUT-MATERIAL-ID = 0
        ADD 1 TO MATERIAL-COUNT
        MOVE IN-MATERIAL-NAME TO MATERIAL-NAME(MATERIAL-COUNT)
        MOVE MATERIAL-COUNT TO OUT-MATERIAL-ID
    END-IF.

BFS-LOOP.
    PERFORM DEQUEUE.
    IF FLOOR-COUNT(1) = 0 AND FLOOR-COUNT(2) = 0 AND FLOOR-COUNT(3) = 0
        DISPLAY STEPS IN CURRENT-STATE
        STOP RUN
    END-IF.
    PERFORM GENERATE-MOVES.

GENERATE-MOVES.
    MOVE ELEVATOR-LEVEL IN CURRENT-STATE TO I.
    PERFORM VARYING ITEM-IDX-1 FROM 1 BY 1
        UNTIL ITEM-IDX-1 > FLOOR-COUNT(I)
        PERFORM MOVE-ITEMS-ROUTINE WITH 1, ITEM-IDX-1, 0
    END-PERFORM.

    PERFORM VARYING ITEM-IDX-1 FROM 1 BY 1
        UNTIL ITEM-IDX-1 > FLOOR-COUNT(I)
        PERFORM VARYING ITEM-IDX-2 FROM ITEM-IDX-1 + 1 BY 1
            UNTIL ITEM-IDX-2 > FLOOR-COUNT(I)
            PERFORM MOVE-ITEMS-ROUTINE WITH 2, ITEM-IDX-1, ITEM-IDX-2
        END-PERFORM
    END-PERFORM.

MOVE-ITEMS-ROUTINE WITH NUM-TO-MOVE, IDX-1, IDX-2.
    DECLARE NUM-TO-MOVE PIC 9(1).
    DECLARE IDX-1 PIC 9(2).
    DECLARE IDX-2 PIC 9(2).
    PERFORM VARYING D FROM 1 BY 1 UNTIL D > 2
        IF D = 1
            MOVE 1 TO ELEV-DIFF
        ELSE
            MOVE -1 TO ELEV-DIFF
        END-IF
        COMPUTE NEXT-LEVEL = ELEVATOR-LEVEL IN CURRENT-STATE + ELEV-DIFF
        IF NEXT-LEVEL > 0 AND NEXT-LEVEL <= MAX-FLOORS
            PERFORM PROCESS-SINGLE-MOVE
                USING NUM-TO-MOVE, IDX-1, IDX-2, NEXT-LEVEL
        END-IF
    END-PERFORM.

PROCESS-SINGLE-MOVE USING NUM-TO-MOVE, IDX-1, IDX-2, P-NEXT-LEVEL.
    DECLARE NUM-TO-MOVE PIC 9(1).
    DECLARE IDX-1 PIC 9(2).
    DECLARE IDX-2 PIC 9(2).
    DECLARE P-NEXT-LEVEL PIC 9(1).
    MOVE CURRENT-STATE TO NEXT-STATE.
    ADD 1 TO STEPS IN NEXT-STATE.
    MOVE P-NEXT-LEVEL TO ELEVATOR-LEVEL IN NEXT-STATE.
    MOVE ELEVATOR-LEVEL IN CURRENT-STATE TO I.

    ADD 1 TO FLOOR-COUNT(P-NEXT-LEVEL) IN NEXT-STATE.
    MOVE ITEMS(I, IDX-1) IN NEXT-STATE
      TO ITEMS(P-NEXT-LEVEL, FLOOR-COUNT(P-NEXT-LEVEL) IN NEXT-STATE).

    MOVE ITEMS(I, FLOOR-COUNT(I) IN NEXT-STATE) IN NEXT-STATE
      TO ITEMS(I, IDX-1) IN NEXT-STATE.
    SUBTRACT 1 FROM FLOOR-COUNT(I) IN NEXT-STATE.

    IF NUM-TO-MOVE = 2
        ADD 1 TO FLOOR-COUNT(P-NEXT-LEVEL) IN NEXT-STATE
        MOVE ITEMS(I, IDX-2) IN NEXT-STATE
          TO ITEMS(P-NEXT-LEVEL, FLOOR-COUNT(P-NEXT-LEVEL) IN NEXT-STATE)

        MOVE ITEMS(I, FLOOR-COUNT(I) IN NEXT-STATE) IN NEXT-STATE
          TO ITEMS(I, IDX-2) IN NEXT-STATE
        SUBTRACT 1 FROM FLOOR-COUNT(I) IN NEXT-STATE
    END-IF.

    PERFORM IS-VALID-STATE USING NEXT-STATE GIVING IS-VALID-FLAG.
    IF IS-VALID-FLAG = 'Y'
        PERFORM CALCULATE-HASH USING NEXT-STATE GIVING CURRENT-HASH
        PERFORM CHECK-VISITED
        IF IS-VISITED-FLAG = 'N'
            PERFORM ADD-VISITED
            MOVE NEXT-STATE TO CURRENT-STATE
            PERFORM ENQUEUE
        END-IF
    END-IF.

IS-VALID-STATE USING STATE-TO-CHECK, RESULT-FLAG.
    DECLARE STATE-TO-CHECK LIKE STATE-RECORD.
    DECLARE RESULT-FLAG PIC X(1).
    DECLARE GEN-PRESENT-TABLE OCCURS MAX-MATERIALS TIMES PIC 9(1).
    DECLARE HAS-GENERATOR PIC 9(1).
    DECLARE HAS-UNPAIRED-CHIP PIC 9(1).

    MOVE 'Y' TO RESULT-FLAG.
    PERFORM VARYING F FROM 1 BY 1 UNTIL F > MAX-FLOORS
        MOVE 0 TO HAS-GENERATOR
        INITIALIZE GEN-PRESENT-TABLE
        PERFORM VARYING I FROM 1 BY 1
            UNTIL I > FLOOR-COUNT IN STATE-TO-CHECK(F)
            IF IS-CHIP IN ITEMS IN STATE-TO-CHECK(F, I) = GENERATOR-TYPE
                MOVE 1 TO HAS-GENERATOR
                MOVE 1 TO GEN-PRESENT-TABLE(
                    MATERIAL-ID IN ITEMS IN STATE-TO-CHECK(F, I))
            END-IF
        END-PERFORM

        IF HAS-GENERATOR = 1
            MOVE 0 TO HAS-UNPAIRED-CHIP
            PERFORM VARYING I FROM 1 BY 1
                UNTIL I > FLOOR-COUNT IN STATE-TO-CHECK(F)
                IF IS-CHIP IN ITEMS IN STATE-TO-CHECK(F, I) = CHIP-TYPE
                    MOVE MATERIAL-ID IN ITEMS IN STATE-TO-CHECK(F, I) TO M
                    IF GEN-PRESENT-TABLE(M) = 0
                        MOVE 1 TO HAS-UNPAIRED-CHIP
                        EXIT PERFORM
                    END-IF
                END-IF
            END-PERFORM
            IF HAS-UNPAIRED-CHIP = 1
                MOVE 'N' TO RESULT-FLAG
                EXIT PERFORM
            END-IF
        END-IF
    END-PERFORM.

CALCULATE-HASH USING STATE-TO-HASH, HASH-VALUE.
    DECLARE STATE-TO-HASH LIKE STATE-RECORD.
    DECLARE HASH-VALUE PIC S9(18) COMP-5.
    DECLARE GEN-FLOORS OCCURS MAX-MATERIALS TIMES PIC 9(1).
    DECLARE CHIP-FLOORS OCCURS MAX-MATERIALS TIMES PIC 9(1).

    INITIALIZE GEN-FLOORS, CHIP-FLOORS.
    PERFORM VARYING F FROM 1 BY 1 UNTIL F > MAX-FLOORS
        PERFORM VARYING I FROM 1 BY 1
            UNTIL I > FLOOR-COUNT IN STATE-TO-HASH(F)
            MOVE MATERIAL-ID IN ITEMS IN STATE-TO-HASH(F, I) TO M
            IF IS-CHIP IN ITEMS IN STATE-TO-HASH(F, I) = CHIP-TYPE
                MOVE F TO CHIP-FLOORS(M)
            ELSE
                MOVE F TO GEN-FLOORS(M)
            END-IF
        END-PERFORM
    END-PERFORM.

    PERFORM VARYING I FROM 1 BY 1 UNTIL I > NUM-MATERIALS IN STATE-TO-HASH
        MOVE GEN-FLOORS(I) TO GEN-FLOOR(I)
        MOVE CHIP-FLOORS(I) TO CHIP-FLOOR(I)
    END-PERFORM.
    SORT FLOOR-PAIRS-TABLE.

    MOVE ELEVATOR-LEVEL IN STATE-TO-HASH TO HASH-VALUE.
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > NUM-MATERIALS IN STATE-TO-HASH
        COMPUTE HASH-VALUE = HASH-VALUE * 31 + GEN-FLOOR(I)
        COMPUTE HASH-VALUE = HASH-VALUE * 31 + CHIP-FLOOR(I)
    END-PERFORM.

ENQUEUE.
    ADD 1 TO QUEUE-END.
    MOVE CURRENT-STATE TO QUEUE-STATE(QUEUE-END).

DEQUEUE.
    MOVE QUEUE-STATE(QUEUE-START) TO CURRENT-STATE.
    ADD 1 TO QUEUE-START.

CHECK-VISITED.
    MOVE 'N' TO IS-VISITED-FLAG.
    SEARCH ALL VISITED-TABLE
        AT END MOVE 'N' TO IS-VISITED-FLAG
        WHEN VISITED-HASH(V-IDX) = CURRENT-HASH
            MOVE 'Y' TO IS-VISITED-FLAG
    END-SEARCH.

ADD-VISITED.
    ADD 1 TO VISITED-COUNT.
    IF VISITED-COUNT > VISITED-CAPACITY
        DISPLAY "VISITED SET CAPACITY EXCEEDED"
        STOP RUN
    END-IF.
    MOVE 0 TO I.
    PERFORM VARYING J FROM VISITED-COUNT BY -1 UNTIL J = 0
        IF J > 1 AND CURRENT-HASH < VISITED-HASH(J - 1)
            MOVE VISITED-HASH(J - 1) TO VISITED-HASH(J)
        ELSE
            MOVE J TO I
            EXIT PERFORM
        END-IF
    END-PERFORM.
    MOVE CURRENT-HASH TO VISITED-HASH(I).

END PROGRAM RadioisotopeThermoelectric.
