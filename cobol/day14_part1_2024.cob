
IDENTIFICATION DIVISION.
PROGRAM-ID. ROBOT-SIMULATOR.

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT INPUT-FILE ASSIGN TO "input.txt"
        ORGANIZATION IS LINE SEQUENTIAL
        FILE STATUS IS WS-FILE-STATUS.

DATA DIVISION.
FILE SECTION.
FD INPUT-FILE.
01 INPUT-RECORD PIC X(80).

WORKING-STORAGE SECTION.
01 WS-CONSTANTS.
    05 WS-WIDTH PIC S9(3) COMP-5 VALUE 101.
    05 WS-HEIGHT PIC S9(3) COMP-5 VALUE 103.
    05 WS-SIM-STEPS PIC S9(3) COMP-5 VALUE 100.
    05 WS-X-THRESHOLD PIC S9(3) COMP-5 VALUE 50.
    05 WS-Y-THRESHOLD PIC S9(3) COMP-5 VALUE 51.

01 WS-ROBOT-DATA.
    05 WS-ROBOT-COUNT PIC S9(5) COMP-5 VALUE 0.
    05 WS-ROBOT-TABLE OCCURS 1000 TIMES INDEXED BY ROBOT-IDX.
        10 WS-POS-X PIC S9(5) COMP-5.
        10 WS-POS-Y PIC S9(5) COMP-5.
        10 WS-VEL-X PIC S9(5) COMP-5.
        10 WS-VEL-Y PIC S9(5) COMP-5.

01 WS-QUADRANT-COUNTS.
    05 WS-Q1 PIC S9(9) COMP-5 VALUE 0.
    05 WS-Q2 PIC S9(9) COMP-5 VALUE 0.
    05 WS-Q3 PIC S9(9) COMP-5 VALUE 0.
    05 WS-Q4 PIC S9(9) COMP-5 VALUE 0.

01 WS-CALC-RESULT PIC S9(18) COMP-5.

01 WS-FILE-STATUS PIC X(02).
    88 END-OF-FILE VALUE "10".

01 WS-TEMP-STRINGS.
    05 WS-DUMMY-P PIC X(5).
    05 WS-X-STR PIC X(10).
    05 WS-Y-STR PIC X(10).
    05 WS-DUMMY-V PIC X(5).
    05 WS-VX-STR PIC X(10).
    05 WS-VY-STR PIC X(10).

01 WS-SIM-STEP PIC S9(3) COMP-5.

PROCEDURE DIVISION.
MAIN-LOGIC SECTION.
    PERFORM INITIALIZE-PROGRAM.
    PERFORM READ-INPUT-FILE.
    PERFORM SIMULATE-ROBOTS.
    PERFORM COUNT-QUADRANTS.
    PERFORM DISPLAY-RESULT.
    PERFORM TERMINATE-PROGRAM.
    STOP RUN.

INITIALIZE-PROGRAM.
    OPEN INPUT INPUT-FILE.
    IF WS-FILE-STATUS NOT = "00" AND WS-FILE-STATUS NOT = "97" THEN
        DISPLAY "Error opening input.txt: " WS-FILE-STATUS
        STOP RUN
    END-IF.

READ-INPUT-FILE.
    PERFORM UNTIL END-OF-FILE
        READ INPUT-FILE INTO INPUT-RECORD
            AT END
                SET END-OF-FILE TO TRUE
            NOT AT END
                ADD 1 TO WS-ROBOT-COUNT
                SET ROBOT-IDX TO WS-ROBOT-COUNT
                PERFORM PARSE-ROBOT-DATA
        END-READ
    END-PERFORM.
    CLOSE INPUT-FILE.

PARSE-ROBOT-DATA.
    UNSTRING INPUT-RECORD DELIMITED BY ALL SPACES OR "=" OR "," OR ">"
        INTO WS-DUMMY-P, WS-X-STR, WS-Y-STR, WS-DUMMY-V, WS-VX-STR, WS-VY-STR
    END-UNSTRING.
    MOVE FUNCTION NUMVAL(WS-X-STR) TO WS-POS-X(ROBOT-IDX).
    MOVE FUNCTION NUMVAL(WS-Y-STR) TO WS-POS-Y(ROBOT-IDX).
    MOVE FUNCTION NUMVAL(WS-VX-STR) TO WS-VEL-X(ROBOT-IDX).
    MOVE FUNCTION NUMVAL(WS-VY-STR) TO WS-VEL-Y(ROBOT-IDX).

SIMULATE-ROBOTS.
    PERFORM VARYING WS-SIM-STEP FROM 1 BY 1 UNTIL WS-SIM-STEP > WS-SIM-STEPS
        PERFORM VARYING ROBOT-IDX FROM 1 BY 1 UNTIL ROBOT-IDX > WS-ROBOT-COUNT
            COMPUTE WS-POS-X(ROBOT-IDX) =
                FUNCTION MOD((WS-POS-X(ROBOT-IDX) + WS-VEL-X(ROBOT-IDX)), WS-WIDTH)
            END-COMPUTE
            IF WS-POS-X(ROBOT-IDX) < 0 THEN
                ADD WS-WIDTH TO WS-POS-X(ROBOT-IDX)
            END-IF

            COMPUTE WS-POS-Y(ROBOT-IDX) =
                FUNCTION MOD((WS-POS-Y(ROBOT-IDX) + WS-VEL-Y(ROBOT-IDX)), WS-HEIGHT)
            END-COMPUTE
            IF WS-POS-Y(ROBOT-IDX) < 0 THEN
                ADD WS-HEIGHT TO WS-POS-Y(ROBOT-IDX)
            END-IF
        END-PERFORM
    END-PERFORM.

COUNT-QUADRANTS.
    PERFORM VARYING ROBOT-IDX FROM 1 BY 1 UNTIL ROBOT-IDX > WS-ROBOT-COUNT
        IF WS-POS-X(ROBOT-IDX) = WS-X-THRESHOLD OR WS-POS-Y(ROBOT-IDX) = WS-Y-THRESHOLD THEN
            CONTINUE
        ELSE IF WS-POS-X(ROBOT-IDX) < WS-X-THRESHOLD AND WS-POS-Y(ROBOT-IDX) < WS-Y-THRESHOLD THEN
            ADD 1 TO WS-Q1
        ELSE IF WS-POS-X(ROBOT-IDX) > WS-X-THRESHOLD AND WS-POS-Y(ROBOT-IDX) < WS-Y-THRESHOLD THEN
            ADD 1 TO WS-Q2
        ELSE IF WS-POS-X(ROBOT-IDX) < WS-X-THRESHOLD AND WS-POS-Y(ROBOT-IDX) > WS-Y-THRESHOLD THEN
            ADD 1 TO WS-Q3
        ELSE
            ADD 1 TO WS-Q4
        END-IF
    END-PERFORM.

DISPLAY-RESULT.
    COMPUTE WS-CALC-RESULT = WS-Q1 * WS-Q2 * WS-Q3 * WS-Q4.
    DISPLAY WS-CALC-RESULT.

TERMINATE-PROGRAM.
    EXIT PROGRAM.
