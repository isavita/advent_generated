
IDENTIFICATION DIVISION.
PROGRAM-ID. ALMANAC-SOLVER.

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT INPUT-FILE ASSIGN TO "input.txt"
        ORGANIZATION IS LINE SEQUENTIAL.

DATA DIVISION.
FILE SECTION.
FD INPUT-FILE.
01 INPUT-LINE PIC X(256).

WORKING-STORAGE SECTION.
01 WS-EOF-FLAG           PIC X VALUE 'N'.
   88 WS-EOF                     VALUE 'Y'.
01 WS-LINE-LEN           PIC 9(3).
01 WS-UNSTRING-PTR       PIC 9(3).
01 WS-CURRENT-TOKEN      PIC X(256).
01 WS-MAP-STATE          PIC X(10) VALUE SPACES.
   88 WS-STATE-SEEDS             VALUE 'SEEDS'.
   88 WS-STATE-MAPPING           VALUE 'MAPPING'.
   88 WS-STATE-NONE              VALUE 'NONE'.

01 WS-SEED-RANGES.
   05 WS-SEED-PAIR OCCURS 20 TIMES INDEXED BY SEED-IDX.
      10 WS-SEED-START    PIC 9(18) COMP-5.
      10 WS-SEED-LENGTH   PIC 9(18) COMP-5.
01 WS-SEED-COUNT         PIC 9(3) VALUE 0.

01 WS-MAPS.
   05 WS-MAP OCCURS 10 TIMES INDEXED BY MAP-IDX.
      10 WS-MAP-ENTRY OCCURS 50 TIMES INDEXED BY ENTRY-IDX.
         15 WS-MAP-DEST-START PIC 9(18) COMP-5.
         15 WS-MAP-SRC-START  PIC 9(18) COMP-5.
         15 WS-MAP-LENGTH     PIC 9(18) COMP-5.
      10 WS-MAP-ENTRY-COUNT PIC 9(3) VALUE 0.
01 WS-MAP-COUNT          PIC 9(3) VALUE 0.

01 WS-LOCATION           PIC 9(18) COMP-5 VALUE 0.
01 WS-CURRENT-SEED       PIC 9(18) COMP-5.
01 WS-FOUND-ANSWER       PIC X VALUE 'N'.
   88 WS-ANSWER-FOUND            VALUE 'Y'.

01 WS-ORIGINAL-NUMBER    PIC 9(18) COMP-5.
01 WS-CONVERTED-FLAG     PIC X VALUE 'N'.
   88 WS-CONVERTED               VALUE 'Y'.

PROCEDURE DIVISION.
MAIN-LOGIC.
    PERFORM INITIALIZE-PROGRAM.
    PERFORM READ-INPUT-FILE.
    PERFORM PROCESS-ALMANAC.
    STOP RUN.

INITIALIZE-PROGRAM.
    OPEN INPUT INPUT-FILE.
    MOVE 'N' TO WS-EOF-FLAG.
    MOVE 'NONE' TO WS-MAP-STATE.
    MOVE 0 TO WS-SEED-COUNT.
    MOVE 0 TO WS-MAP-COUNT.
    PERFORM VARYING MAP-IDX FROM 1 BY 1 UNTIL MAP-IDX > 10
        MOVE 0 TO WS-MAP-ENTRY-COUNT(MAP-IDX)
    END-PERFORM.

READ-INPUT-FILE.
    PERFORM UNTIL WS-EOF
        READ INPUT-FILE INTO INPUT-LINE
            AT END SET WS-EOF TO TRUE
            NOT AT END PERFORM PROCESS-LINE
        END-READ
    END-PERFORM.
    CLOSE INPUT-FILE.

PROCESS-LINE.
    COMPUTE WS-LINE-LEN = FUNCTION LENGTH(FUNCTION TRIM(INPUT-LINE)).
    IF WS-LINE-LEN = 0 THEN
        MOVE 'NONE' TO WS-MAP-STATE
        EXIT PARAGRAPH
    END-IF.

    IF INPUT-LINE(1:6) = "seeds:" THEN
        MOVE 'SEEDS' TO WS-MAP-STATE
        PERFORM PARSE-SEEDS
    ELSE IF INPUT-LINE(WS-LINE-LEN - 3:4) = "map:" THEN
        ADD 1 TO WS-MAP-COUNT
        MOVE 0 TO WS-MAP-ENTRY-COUNT(WS-MAP-COUNT)
        MOVE 'MAPPING' TO WS-MAP-STATE
    ELSE IF WS-STATE-MAPPING THEN
        PERFORM PARSE-MAP-ENTRY
    END-IF.

PARSE-SEEDS.
    MOVE 7 TO WS-UNSTRING-PTR.
    MOVE 0 TO WS-SEED-COUNT.
    PERFORM UNTIL WS-UNSTRING-PTR > WS-LINE-LEN
        UNSTRING INPUT-LINE DELIMITED BY SPACE
            INTO WS-CURRENT-TOKEN
            WITH POINTER WS-UNSTRING-PTR
        END-UNSTRING
        IF WS-CURRENT-TOKEN NOT = SPACES
            ADD 1 TO WS-SEED-COUNT
            IF WS-SEED-COUNT > 20 THEN
                DISPLAY "WARNING: TOO MANY SEED RANGES, MAX 20 SUPPORTED"
                EXIT PARAGRAPH
            END-IF
            MOVE FUNCTION NUMVAL(WS-CURRENT-TOKEN) TO WS-SEED-START(WS-SEED-COUNT)
            UNSTRING INPUT-LINE DELIMITED BY SPACE
                INTO WS-CURRENT-TOKEN
                WITH POINTER WS-UNSTRING-PTR
            END-UNSTRING
            IF WS-CURRENT-TOKEN NOT = SPACES
                MOVE FUNCTION NUMVAL(WS-CURRENT-TOKEN) TO WS-SEED-LENGTH(WS-SEED-COUNT)
            ELSE
                DISPLAY "ERROR: MALFORMED SEED RANGE - MISSING LENGTH"
                EXIT PARAGRAPH
            END-IF
        END-IF
    END-PERFORM.

PARSE-MAP-ENTRY.
    ADD 1 TO WS-MAP-ENTRY-COUNT(WS-MAP-COUNT).
    IF WS-MAP-ENTRY-COUNT(WS-MAP-COUNT) > 50 THEN
        DISPLAY "WARNING: TOO MANY MAP ENTRIES FOR MAP " WS-MAP-COUNT ", MAX 50 SUPPORTED"
        EXIT PARAGRAPH
    END-IF.

    MOVE 1 TO WS-UNSTRING-PTR.
    UNSTRING INPUT-LINE DELIMITED BY SPACE
        INTO WS-CURRENT-TOKEN
        WITH POINTER WS-UNSTRING-PTR
    END-UNSTRING.
    MOVE FUNCTION NUMVAL(WS-CURRENT-TOKEN) TO WS-MAP-DEST-START(WS-MAP-COUNT, WS-MAP-ENTRY-COUNT(WS-MAP-COUNT)).

    UNSTRING INPUT-LINE DELIMITED BY SPACE
        INTO WS-CURRENT-TOKEN
        WITH POINTER WS-UNSTRING-PTR
    END-UNSTRING.
    MOVE FUNCTION NUMVAL(WS-CURRENT-TOKEN) TO WS-MAP-SRC-START(WS-MAP-COUNT, WS-MAP-ENTRY-COUNT(WS-MAP-COUNT)).

    UNSTRING INPUT-LINE DELIMITED BY SPACE
        INTO WS-CURRENT-TOKEN
        WITH POINTER WS-UNSTRING-PTR
    END-UNSTRING.
    MOVE FUNCTION NUMVAL(WS-CURRENT-TOKEN) TO WS-MAP-LENGTH(WS-MAP-COUNT, WS-MAP-ENTRY-COUNT(WS-MAP-COUNT)).

PROCESS-ALMANAC.
    MOVE 0 TO WS-LOCATION.
    MOVE 'N' TO WS-FOUND-ANSWER.

    PERFORM UNTIL WS-ANSWER-FOUND
        MOVE WS-LOCATION TO WS-CURRENT-SEED
        PERFORM REVERSE-CONVERT-LOCATION
        PERFORM CHECK-SEED-IN-RANGES
        IF WS-ANSWER-FOUND THEN
            DISPLAY WS-LOCATION
        ELSE
            ADD 1 TO WS-LOCATION
        END-IF
    END-PERFORM.

REVERSE-CONVERT-LOCATION.
    PERFORM VARYING MAP-IDX FROM WS-MAP-COUNT BY -1 UNTIL MAP-IDX < 1
        PERFORM REVERSE-CONVERT-SINGLE-MAP
    END-PERFORM.

REVERSE-CONVERT-SINGLE-MAP.
    MOVE WS-CURRENT-SEED TO WS-ORIGINAL-NUMBER.
    MOVE 'N' TO WS-CONVERTED-FLAG.

    PERFORM VARYING ENTRY-IDX FROM WS-MAP-ENTRY-COUNT(MAP-IDX) BY -1 UNTIL ENTRY-IDX < 1 OR WS-CONVERTED
        IF WS-ORIGINAL-NUMBER >= WS-MAP-DEST-START(MAP-IDX, ENTRY-IDX) AND
           WS-ORIGINAL-NUMBER < WS-MAP-DEST-START(MAP-IDX, ENTRY-IDX) + WS-MAP-LENGTH(MAP-IDX, ENTRY-IDX) THEN
            COMPUTE WS-CURRENT-SEED = WS-MAP-SRC-START(MAP-IDX, ENTRY-IDX) +
                                      (WS-ORIGINAL-NUMBER - WS-MAP-DEST-START(MAP-IDX, ENTRY-IDX))
            SET WS-CONVERTED TO TRUE
        END-IF
    END-PERFORM.

CHECK-SEED-IN-RANGES.
    MOVE 'N' TO WS-FOUND-ANSWER.
    PERFORM VARYING SEED-IDX FROM 1 BY 1 UNTIL SEED-IDX > WS-SEED-COUNT OR WS-ANSWER-FOUND
        IF WS-CURRENT-SEED >= WS-SEED-START(SEED-IDX) AND
           WS-CURRENT-SEED < WS-SEED-START(SEED-IDX) + WS-SEED-LENGTH(SEED-IDX) THEN
            SET WS-ANSWER-FOUND TO TRUE
        END-IF
    END-PERFORM.
