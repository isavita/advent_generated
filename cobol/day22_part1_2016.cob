
IDENTIFICATION DIVISION.
PROGRAM-ID. VIABLE-PAIRS.

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT INPUT-FILE ASSIGN TO "input.txt"
        ORGANIZATION IS LINE SEQUENTIAL.

DATA DIVISION.
FILE SECTION.
FD INPUT-FILE.
01 INPUT-RECORD PIC X(256).

WORKING-STORAGE SECTION.
01 WS-EOF                  PIC X VALUE 'N'.
   88 EOF-REACHED          VALUE 'Y'.

01 WS-NODE-DATA.
   05 WS-NODE-COUNT        PIC 9(4) VALUE 0.
   05 WS-NODES OCCURS 1000 TIMES
      INDEXED BY NODE-IDX J-IDX.
      10 WS-NODE-USED      PIC 9(9).
      10 WS-NODE-AVAIL     PIC 9(9).

01 WS-LINE-PARSING.
   05 WS-LINE-BUFFER       PIC X(256).
   05 WS-TEMP-TOKEN        PIC X(50).
   05 WS-USED-TOKEN        PIC X(50).
   05 WS-AVAIL-TOKEN       PIC X(50).
   05 WS-TOKEN-LEN         PIC 9(2).

01 WS-VIABLE-PAIRS         PIC 9(9) VALUE 0.

PROCEDURE DIVISION.
MAIN-LOGIC SECTION.
    PERFORM INITIALIZE-PROGRAM.
    PERFORM READ-NODES-FROM-FILE.
    PERFORM COUNT-VIABLE-PAIRS.
    PERFORM DISPLAY-RESULT.
    PERFORM TERMINATE-PROGRAM.

INITIALIZE-PROGRAM.
    OPEN INPUT INPUT-FILE.

READ-NODES-FROM-FILE.
    PERFORM UNTIL EOF-REACHED
        READ INPUT-FILE INTO WS-LINE-BUFFER
            AT END SET EOF-REACHED TO TRUE
        END-READ

        IF NOT EOF-REACHED
            IF WS-LINE-BUFFER (1:15) = "/dev/grid/node-"
                ADD 1 TO WS-NODE-COUNT
                UNSTRING WS-LINE-BUFFER DELIMITED BY ALL SPACE
                    INTO WS-TEMP-TOKEN, WS-TEMP-TOKEN, WS-USED-TOKEN, WS-AVAIL-TOKEN
                END-UNSTRING

                COMPUTE WS-TOKEN-LEN = FUNCTION LENGTH(FUNCTION TRIM(WS-USED-TOKEN))
                IF WS-TOKEN-LEN > 1 AND WS-USED-TOKEN(WS-TOKEN-LEN:1) = 'T'
                    MOVE WS-USED-TOKEN(1:WS-TOKEN-LEN - 1) TO WS-NODE-USED(WS-NODE-COUNT)
                ELSE
                    MOVE 0 TO WS-NODE-USED(WS-NODE-COUNT)
                END-IF

                COMPUTE WS-TOKEN-LEN = FUNCTION LENGTH(FUNCTION TRIM(WS-AVAIL-TOKEN))
                IF WS-TOKEN-LEN > 1 AND WS-AVAIL-TOKEN(WS-TOKEN-LEN:1) = 'T'
                    MOVE WS-AVAIL-TOKEN(1:WS-TOKEN-LEN - 1) TO WS-NODE-AVAIL(WS-NODE-COUNT)
                ELSE
                    MOVE 0 TO WS-NODE-AVAIL(WS-NODE-COUNT)
                END-IF
            END-IF
        END-IF
    END-PERFORM.

COUNT-VIABLE-PAIRS.
    PERFORM VARYING NODE-IDX FROM 1 BY 1 UNTIL NODE-IDX > WS-NODE-COUNT
        PERFORM VARYING J-IDX FROM 1 BY 1 UNTIL J-IDX > WS-NODE-COUNT
            IF NODE-IDX NOT = J-IDX
                IF WS-NODE-USED(NODE-IDX) > 0
                    IF WS-NODE-USED(NODE-IDX) <= WS-NODE-AVAIL(J-IDX)
                        ADD 1 TO WS-VIABLE-PAIRS
                    END-IF
                END-IF
            END-IF
        END-PERFORM
    END-PERFORM.

DISPLAY-RESULT.
    DISPLAY WS-VIABLE-PAIRS.

TERMINATE-PROGRAM.
    CLOSE INPUT-FILE.
    STOP RUN.
