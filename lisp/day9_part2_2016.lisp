
(defun read-file-contents (filename)
  (with-open-file (stream filename :direction :input :if-does-not-exist :error)
    (let ((data (make-string (file-length stream))))
      (read-sequence data stream)
      (string-trim '(#\Space #\Tab #\Newline #\Return) data))))

(defun decompressed-length-v1 (data)
  (let ((length 0)
        (i 0)
        (data-len (length data)))
    (loop while (< i data-len)
          do (if (char= (char data i) #\()
                 (let* ((marker-end (position #\) data :start i))
                        (marker-str (subseq data (+ i 1) marker-end))
                        (x-pos (position #\x marker-str))
                        (num-chars (parse-integer (subseq marker-str 0 x-pos)))
                        (repeat (parse-integer (subseq marker-str (+ x-pos 1)))))
                   (incf length (* num-chars repeat))
                   (setf i (+ marker-end num-chars 1)))
                 (progn
                   (incf length)
                   (incf i))))
    length))

(defun decompressed-length-v2-recursive (data current-start current-end)
  (let ((length 0)
        (i current-start))
    (loop while (< i current-end)
          do (if (char= (char data i) #\()
                 (let* ((marker-end (position #\) data :start i :end current-end))
                        (marker-str (subseq data (+ i 1) marker-end))
                        (x-pos (position #\x marker-str))
                        (num-chars (parse-integer (subseq marker-str 0 x-pos)))
                        (repeat (parse-integer (subseq marker-str (+ x-pos 1)))))
                   (setf i (+ marker-end 1))
                   (incf length (* (decompressed-length-v2-recursive data i (+ i num-chars)) repeat))
                   (incf i num-chars))
                 (progn
                   (incf length)
                   (incf i))))
    length))

(defun decompressed-length-v2 (data)
  (decompressed-length-v2-recursive data 0 (length data)))

(defun main ()
  (let ((data (read-file-contents "input.txt")))
    (format t "~a~%" (decompressed-length-v1 data))
    (format t "~a~%" (decompressed-length-v2 data))))

(main)
