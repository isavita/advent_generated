
(defun vector-ends-with-p (vec suffix)
  (declare (optimize (speed 3) (safety 0)))
  (let* ((vec-len (fill-pointer vec))
         (suffix-len (length suffix)))
    (when (< vec-len suffix-len)
      (return-from vector-ends-with-p nil))
    (loop for i fixnum from 0 below suffix-len
          for j fixnum from (- vec-len suffix-len)
          do (unless (= (the fixnum (aref vec j)) (the fixnum (aref suffix i)))
               (return-from vector-ends-with-p nil))
          finally (return-from vector-ends-with-p t))))

(defun main ()
  (let* ((input-string (with-open-file (f "input.txt") (read-line f)))
         (input-len (length input-string))
         (input-sequence (map 'vector
                              (lambda (c) (- (char-code c) (char-code #\0)))
                              input-string))
         (scoreboard (make-array 2 :initial-contents '(3 7)
                                 :adjustable t :fill-pointer t))
         (elf1 0)
         (elf2 1))
    (loop
      (let* ((score1 (the fixnum (aref scoreboard elf1)))
             (score2 (the fixnum (aref scoreboard elf2)))
             (new-score (+ score1 score2)))
        (when (>= new-score 10)
          (vector-push-extend (floor new-score 10) scoreboard)
          (when (>= (fill-pointer scoreboard) input-len)
            (when (vector-ends-with-p scoreboard input-sequence)
              (return-from main (- (fill-pointer scoreboard) input-len)))))
        (vector-push-extend (mod new-score 10) scoreboard)
        (when (>= (fill-pointer scoreboard) input-len)
          (when (vector-ends-with-p scoreboard input-sequence)
            (return-from main (- (fill-pointer scoreboard) input-len))))
        (setf elf1 (mod (+ elf1 score1 1) (fill-pointer scoreboard)))
        (setf elf2 (mod (+ elf2 score2 1) (fill-pointer scoreboard)))))))

(print (main))
