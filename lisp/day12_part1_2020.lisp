
(defun read-instructions (filename)
  (with-open-file (stream filename :direction :input)
    (loop for line = (read-line stream nil :eof)
          until (eq line :eof)
          collect (list (char line 0) (parse-integer (subseq line 1))))))

(defun main ()
  (let* ((instructions (read-instructions "input.txt"))
         (x 0)
         (y 0)
         (current-dir-idx 0)
         (dx-dy-vals '#((1 0) (0 -1) (-1 0) (0 1))))
    (dolist (instruction instructions)
      (let ((action (first instruction))
            (value (second instruction)))
        (case action
          (#\N (incf y value))
          (#\S (decf y value))
          (#\E (incf x value))
          (#\W (decf x value))
          (#\L (setf current-dir-idx (mod (- current-dir-idx (/ value 90)) 4)))
          (#\R (setf current-dir-idx (mod (+ current-dir-idx (/ value 90)) 4)))
          (#\F (let ((dir-vec (aref dx-dy-vals current-dir-idx)))
                 (incf x (* value (first dir-vec)))
                 (incf y (* value (second dir-vec))))))))
    (format t "~a~%" (+ (abs x) (abs y)))))

(main)
