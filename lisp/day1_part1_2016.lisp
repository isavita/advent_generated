
(defun main ()
  (let ((dirs (vector '(0 . 1) '(1 . 0) '(0 . -1) '(-1 . 0)))
        (current-dir 0)
        (x 0)
        (y 0))
    (with-open-file (f "input.txt" :direction :input)
      (let* ((line (read-line f nil nil))
             (instructions (loop for start = 0 then (+ end 2)
                                 for end = (position #\, line :start start)
                                 collect (subseq line start (or end (length line)))
                                 while end)))
        (dolist (instr instructions)
          (let* ((turn (char instr 0))
                 (dist (parse-integer instr :start 1)))
            (if (char= turn #\R)
                (setf current-dir (mod (1+ current-dir) 4))
                (setf current-dir (mod (1- current-dir) 4)))
            (let ((dx (car (aref dirs current-dir)))
                  (dy (cdr (aref dirs current-dir))))
              (incf x (* dx dist))
              (incf y (* dy dist)))))))
    (format t "~A~%" (+ (abs x) (abs y)))))

(main)
