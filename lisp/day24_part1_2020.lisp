
(defun solve ()
  (let ((black-tiles (make-hash-table :test 'equal)))
    (with-open-file (in "input.txt" :direction :input)
      (loop for instruction = (read-line in nil nil)
            while instruction
            do (let ((x 0) (y 0) (i 0) (len (length instruction)))
                 (loop while (< i len)
                       do (cond
                            ((and (< (+ i 1) len) (char= (char instruction i) #\s) (char= (char instruction (+ i 1)) #\e))
                             (decf y)
                             (incf i 2))
                            ((and (< (+ i 1) len) (char= (char instruction i) #\s) (char= (char instruction (+ i 1)) #\w))
                             (decf x)
                             (decf y)
                             (incf i 2))
                            ((and (< (+ i 1) len) (char= (char instruction i) #\n) (char= (char instruction (+ i 1)) #\e))
                             (incf x)
                             (incf y)
                             (incf i 2))
                            ((and (< (+ i 1) len) (char= (char instruction i) #\n) (char= (char instruction (+ i 1)) #\w))
                             (incf y)
                             (incf i 2))
                            ((char= (char instruction i) #\e)
                             (incf x)
                             (incf i 1))
                            ((char= (char instruction i) #\w)
                             (decf x)
                             (incf i 1))))
                 (let ((tile (list x y)))
                   (if (gethash tile black-tiles)
                       (remhash tile black-tiles)
                       (setf (gethash tile black-tiles) t))))))
    (format t "~a~%" (hash-table-count black-tiles))))

(defun main ()
  (solve))

(main)
