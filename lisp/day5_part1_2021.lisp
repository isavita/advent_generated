
(defun split-string (string delimiter)
  (let ((parts '())
        (start 0)
        (delim-len (length delimiter)))
    (loop
      (let ((pos (search delimiter string :start2 start)))
        (if pos
            (progn
              (push (subseq string start pos) parts)
              (setf start (+ pos delim-len)))
            (progn
              (push (subseq string start) parts)
              (return (nreverse parts))))))))

(defun split-char (string char)
  (loop for i = 0 then (1+ j)
        for j = (position char string :start i)
        collect (subseq string i (or j (length string)))
        while j))

(defun main ()
  (let ((point-counts (make-hash-table :test 'equal)))
    (with-open-file (file "input.txt" :direction :input)
      (loop for line = (read-line file nil nil)
            while line
            do (let* ((parts (split-string line " -> "))
                      (coord1-str (nth 0 parts))
                      (coord2-str (nth 1 parts))
                      (coord1 (mapcar #'parse-integer (split-char coord1-str #\,)))
                      (coord2 (mapcar #'parse-integer (split-char coord2-str #\,)))
                      (x1 (nth 0 coord1))
                      (y1 (nth 1 coord1))
                      (x2 (nth 0 coord2))
                      (y2 (nth 1 coord2)))
                 (cond ((= x1 x2)
                        (loop for y from (min y1 y2) to (max y1 y2)
                              do (let ((point (list x1 y)))
                                   (setf (gethash point point-counts)
                                         (1+ (gethash point point-counts 0))))))
                       ((= y1 y2)
                        (loop for x from (min x1 x2) to (max x1 x2)
                              do (let ((point (list x y1)))
                                   (setf (gethash point point-counts)
                                         (1+ (gethash point point-counts 0))))))))))
    (let ((overlap-count 0))
      (maphash (lambda (point count)
                 (declare (ignore point))
                 (when (> count 1)
                   (incf overlap-count)))
               point-counts)
      (format t "~a~%" overlap-count))))

(main)
