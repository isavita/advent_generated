
(defun main ()
  (let* ((lines (with-open-file (s "input.txt")
                   (loop for line = (read-line s nil nil)
                         while line
                         collect line)))
         (p1-start (parse-integer (subseq (nth 0 lines) 28)))
         (p2-start (parse-integer (subseq (nth 1 lines) 28))))
    (let ((p1-pos p1-start)
          (p2-pos p2-start)
          (p1-score 0)
          (p2-score 0)
          (die 1)
          (rcount 0))
      (loop
        (let* ((rsum (+ (mod die 100)
                        (mod (+ die 1) 100)
                        (mod (+ die 2) 100))))
          (incf rcount 3)
          (incf die 3)
          (setf p1-pos (+ (mod (+ p1-pos rsum -1) 10) 1))
          (incf p1-score p1-pos)
          (when (>= p1-score 1000)
            (format t "~a~%" (* p2-score rcount))
            (return)))
        (let* ((rsum (+ (mod die 100)
                        (mod (+ die 1) 100)
                        (mod (+ die 2) 100))))
          (incf rcount 3)
          (incf die 3)
          (setf p2-pos (+ (mod (+ p2-pos rsum -1) 10) 1))
          (incf p2-score p2-pos)
          (when (>= p2-score 1000)
            (format t "~a~%" (* p1-score rcount))
            (return)))))))

(main)
