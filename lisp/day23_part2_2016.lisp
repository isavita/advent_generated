
(in-package :cl-user)

(defun split-string (s)
  (loop for start = 0 then (1+ end)
        for end = (position #\Space s :start start)
        collect (subseq s start (or end (length s)))
        while end))

(defun is-register (s)
  (member s '("a" "b" "c" "d") :test #'string=))

(defun get-value (arg registers)
  (if (is-register arg)
      (gethash arg registers)
      (parse-integer arg)))

(defun execute-program (instructions registers)
  (let ((i 0)
        (len (length instructions)))
    (tagbody
     program-loop
       (when (>= i len) (go end-program))

       (when (and (<= (+ i 5) (1- len)))
         (let* ((p0 (split-string (aref instructions i)))
                (p1 (split-string (aref instructions (+ i 1))))
                (p2 (split-string (aref instructions (+ i 2))))
                (p3 (split-string (aref instructions (+ i 3))))
                (p4 (split-string (aref instructions (+ i 4))))
                (p5 (split-string (aref instructions (+ i 5))))
                (cmd0 (elt p0 0))
                (cmd1 (elt p1 0))
                (cmd2 (elt p2 0))
                (cmd3 (elt p3 0))
                (cmd4 (elt p4 0))
                (cmd5 (elt p5 0)))
           (when (and (string= cmd0 "cpy")
                      (string= cmd1 "inc")
                      (string= cmd2 "dec")
                      (string= cmd3 "jnz")
                      (string= cmd4 "dec")
                      (string= cmd5 "jnz"))
             (let* ((cpy-x (elt p0 1))
                    (cpy-y (elt p0 2))
                    (inc-a (elt p1 1))
                    (dec-c (elt p2 1))
                    (jnz-c (elt p3 1))
                    (jnz-c-offset (parse-integer (elt p3 2)))
                    (dec-d (elt p4 1))
                    (jnz-d (elt p5 1))
                    (jnz-d-offset (parse-integer (elt p5 2))))
               (when (and (string= inc-a "a")
                          (string= dec-c cpy-y)
                          (string= jnz-c cpy-y)
                          (= jnz-c-offset -2)
                          (string= dec-d "d")
                          (string= jnz-d "d")
                          (= jnz-d-offset -5))
                 (incf (gethash "a" registers)
                       (* (gethash cpy-x registers) (gethash "d" registers)))
                 (setf (gethash cpy-y registers) 0)
                 (setf (gethash "d" registers) 0)
                 (incf i 6)
                 (go program-loop))))))

       (let* ((parts (split-string (aref instructions i)))
              (cmd (elt parts 0)))
         (cond
           ((string= cmd "tgl")
            (let* ((x (get-value (elt parts 1) registers))
                   (target-idx (+ i x)))
              (when (and (>= target-idx 0) (< target-idx len))
                (let* ((target-parts (split-string (aref instructions target-idx)))
                       (target-cmd (elt target-parts 0)))
                  (setf (elt target-parts 0)
                        (cond
                          ((string= target-cmd "inc") "dec")
                          ((string= target-cmd "dec") "inc")
                          ((string= target-cmd "jnz") "cpy")
                          ((string= target-cmd "cpy") "jnz")
                          (t target-cmd)))
                  (setf (aref instructions target-idx) (format nil "~{~a~^ ~}" target-parts)))))
            (incf i))

           ((string= cmd "cpy")
            (let ((x (elt parts 1))
                  (y (elt parts 2)))
              (when (is-register y)
                (setf (gethash y registers) (get-value x registers))))
            (incf i))

           ((string= cmd "inc")
            (let ((x (elt parts 1)))
              (when (is-register x)
                (incf (gethash x registers))))
            (incf i))

           ((string= cmd "dec")
            (let ((x (elt parts 1)))
              (when (is-register x)
                (decf (gethash x registers))))
            (incf i))

           ((string= cmd "jnz")
            (let ((x (elt parts 1))
                  (y (elt parts 2)))
              (if (/= (get-value x registers) 0)
                  (incf i (get-value y registers))
                  (incf i))))
           (t (incf i))))
       (go program-loop)
     end-program)))

(defun read-input ()
  (with-open-file (f "input.txt" :direction :input :if-does-not-exist :error)
    (loop for line = (read-line f nil)
          while line
          collect (string-trim '(#\Space #\Tab #\Newline #\Return) line) into lines
          finally (return (make-array (length lines) :initial-contents lines)))))

(defun main ()
  (let* ((instructions (read-input))
         (registers (make-hash-table :test 'equal)))
    (setf (gethash "a" registers) 12)
    (setf (gethash "b" registers) 0)
    (setf (gethash "c" registers) 0)
    (setf (gethash "d" registers) 0)
    (execute-program instructions registers)
    (format t "~a~%" (gethash "a" registers))))

(main)
