
(defun read-expenses (filename)
  (with-open-file (stream filename :direction :input)
    (loop for line = (read-line stream nil :eof)
          until (eq line :eof)
          collect (parse-integer line))))

(defun solve-part-one (expenses-vec)
  (let* ((len (length expenses-vec))
         (left 0)
         (right (1- len)))
    (loop while (< left right)
          do (let* ((n1 (aref expenses-vec left))
                    (n2 (aref expenses-vec right))
                    (sum (+ n1 n2)))
               (cond ((= sum 2020)
                      (format t "~a~%" (* n1 n2))
                      (return))
                     ((< sum 2020)
                      (incf left))
                     (t
                      (decf right)))))))

(defun solve-part-two (expenses-vec)
  (let ((len (length expenses-vec)))
    (loop for i from 0 to (- len 3)
          do (let* ((n1 (aref expenses-vec i))
                    (target (- 2020 n1))
                    (left (+ i 1))
                    (right (1- len)))
               (loop while (< left right)
                     do (let* ((n2 (aref expenses-vec left))
                               (n3 (aref expenses-vec right))
                               (sum (+ n2 n3)))
                          (cond ((= sum target)
                                 (format t "~a~%" (* n1 n2 n3))
                                 (return))
                                ((< sum target)
                                 (incf left))
                                (t
                                 (decf right)))))))))

(defun main ()
  (let* ((expenses-list (read-expenses "input.txt"))
         (expenses-vec (make-array (length expenses-list) :initial-contents (sort expenses-list #'<))))
    (solve-part-one expenses-vec)
    (solve-part-two expenses-vec)))

(main)
