
(defun generate-addresses (mask address)
  (let ((floating-bits '())
        (fixed-address address))
    (loop for i from 0 below (length mask)
          for char = (char mask i)
          for bit-pos = (- 35 i)
          do (cond ((char= char #\1)
                    (setf fixed-address (logior fixed-address (ash 1 bit-pos))))
                   ((char= char #\X)
                    (push bit-pos floating-bits))))
    (let ((result-addresses '()))
      (loop for i from 0 below (ash 1 (length floating-bits))
            do (let ((current-address fixed-address))
                 (loop for j from 0 below (length floating-bits)
                       for floating-bit-pos = (nth j floating-bits)
                       for bit-value = (logand (ash i (- j)) 1)
                       do (if (zerop bit-value)
                              (setf current-address (logand current-address (lognot (ash 1 floating-bit-pos))))
                              (setf current-address (logior current-address (ash 1 floating-bit-pos)))))
                 (push current-address result-addresses)))
      result-addresses)))

(defun string-starts-with (prefix string)
  (and (>= (length string) (length prefix))
       (string= prefix string :end2 (length prefix))))

(defun parse-mem-line (line)
  (let* ((open-bracket (position #\[ line))
         (close-bracket (position #\] line :start open-bracket))
         (equals-sign (position #\= line :start close-bracket)))
    (let ((address-str (subseq line (1+ open-bracket) close-bracket))
          (value-str (subseq line (+ equals-sign 2))))
      (values (parse-integer address-str) (parse-integer value-str)))))

(defun main ()
  (let ((current-mask "")
        (memory (make-hash-table :test 'eql))
        (total-sum 0))
    (with-open-file (stream "input.txt" :direction :input)
      (loop for line = (read-line stream nil nil)
            while line
            do (cond ((string-starts-with "mask = " line)
                      (setf current-mask (subseq line 7)))
                     (t
                      (multiple-value-bind (address value)
                          (parse-mem-line line)
                        (dolist (addr (generate-addresses current-mask address))
                          (setf (gethash addr memory) value)))))))
    (maphash (lambda (key val)
               (declare (ignore key))
               (incf total-sum val))
             memory)
    (format t "~a~%" total-sum)))

(main)
