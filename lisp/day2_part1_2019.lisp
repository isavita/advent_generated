
(defun split-string (str delimiter)
  (loop for start = 0 then (1+ end)
        for end = (position delimiter str :start start)
        collect (subseq str start (or end (length str)))
        while end))

(defun slurp-file (filename)
  (with-open-file (stream filename :element-type 'character)
    (let ((contents (make-string (file-length stream))))
      (read-sequence contents stream)
      contents)))

(defun read-input-vector (filename)
  (let* ((content (slurp-file filename))
         (parts (split-string content #\,))
         (numbers (mapcar #'parse-integer parts)))
    (make-array (length numbers) :initial-contents numbers)))

(defun main ()
  (let ((data (read-input-vector "input.txt")))
    (setf (aref data 1) 12)
    (setf (aref data 2) 2)
    (loop for pos = 0 then (+ pos 4)
          until (= (aref data pos) 99)
          do (let* ((op (aref data pos))
                    (val1 (aref data (aref data (+ pos 1))))
                    (val2 (aref data (aref data (+ pos 2))))
                    (dest (aref data (+ pos 3))))
               (cond ((= op 1) (setf (aref data dest) (+ val1 val2)))
                     ((= op 2) (setf (aref data dest) (* val1 val2))))))
    (format t "~a~%" (aref data 0))))

(main)
