
(defun main ()
  (let ((x 0)
        (y 0)
        (waypoint-x 10)
        (waypoint-y 1))
    (with-open-file (f "input.txt" :direction :input)
      (loop for line = (read-line f nil nil)
            while line
            do (let* ((action (char line 0))
                      (value (parse-integer (subseq line 1))))
                 (case action
                   (#\N (incf waypoint-y value))
                   (#\S (decf waypoint-y value))
                   (#\E (incf waypoint-x value))
                   (#\W (decf waypoint-x value))
                   (#\L (let ((turns (mod (/ value 90) 4)))
                          (case turns
                            (1 (let ((temp-wx waypoint-x) (temp-wy waypoint-y))
                                 (setf waypoint-x (- temp-wy))
                                 (setf waypoint-y temp-wx)))
                            (2 (setf waypoint-x (- waypoint-x) waypoint-y (- waypoint-y)))
                            (3 (let ((temp-wx waypoint-x) (temp-wy waypoint-y))
                                 (setf waypoint-x temp-wy)
                                 (setf waypoint-y (- temp-wx)))))))
                   (#\R (let ((turns (mod (/ value 90) 4)))
                          (case turns
                            (1 (let ((temp-wx waypoint-x) (temp-wy waypoint-y))
                                 (setf waypoint-x temp-wy)
                                 (setf waypoint-y (- temp-wx))))
                            (2 (setf waypoint-x (- waypoint-x) waypoint-y (- waypoint-y)))
                            (3 (let ((temp-wx waypoint-x) (temp-wy waypoint-y))
                                 (setf waypoint-x (- temp-wy))
                                 (setf waypoint-y temp-wx))))))
                   (#\F (incf x (* waypoint-x value))
                        (incf y (* waypoint-y value)))))))
    (format t "~a~%" (+ (abs x) (abs y)))))

(main)
