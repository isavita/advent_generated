
(defvar *min-mana* most-positive-fixnum)

(defstruct (game-state (:copier copy-game-state))
  (player-hp 0 :type fixnum)
  (player-mana 0 :type fixnum)
  (boss-hp 0 :type fixnum)
  (boss-damage 0 :type fixnum)
  (shield-timer 0 :type fixnum)
  (poison-timer 0 :type fixnum)
  (recharge-timer 0 :type fixnum)
  (mana-spent 0 :type fixnum))

(defun simulate (state player-turn-p)
  (declare (optimize (speed 3) (safety 0) (debug 0)))
  (let ((current-state (copy-game-state state)))

    (when (>= (game-state-mana-spent current-state) *min-mana*)
      (return-from simulate))

    (when player-turn-p
      (decf (game-state-player-hp current-state))
      (when (<= (game-state-player-hp current-state) 0)
        (return-from simulate)))

    (when (> (game-state-shield-timer current-state) 0)
      (decf (game-state-shield-timer current-state)))
    (when (> (game-state-poison-timer current-state) 0)
      (decf (game-state-boss-hp current-state) 3)
      (decf (game-state-poison-timer current-state)))
    (when (> (game-state-recharge-timer current-state) 0)
      (incf (game-state-player-mana current-state) 101)
      (decf (game-state-recharge-timer current-state)))

    (when (<= (game-state-boss-hp current-state) 0)
      (setf *min-mana* (min *min-mana* (game-state-mana-spent current-state)))
      (return-from simulate))

    (unless player-turn-p
      (let ((damage (game-state-boss-damage current-state)))
        (when (> (game-state-shield-timer current-state) 0)
          (decf damage 7))
        (when (< damage 1)
          (setf damage 1))
        (decf (game-state-player-hp current-state) damage))
      (when (<= (game-state-player-hp current-state) 0)
        (return-from simulate))
      (simulate current-state t)
      (return-from simulate))

    (let ((state-after-effects current-state))
      (when (>= (game-state-player-mana state-after-effects) 53)
        (let ((new-state (copy-game-state state-after-effects)))
          (decf (game-state-player-mana new-state) 53)
          (incf (game-state-mana-spent new-state) 53)
          (decf (game-state-boss-hp new-state) 4)
          (simulate new-state nil)))

      (when (>= (game-state-player-mana state-after-effects) 73)
        (let ((new-state (copy-game-state state-after-effects)))
          (decf (game-state-player-mana new-state) 73)
          (incf (game-state-mana-spent new-state) 73)
          (decf (game-state-boss-hp new-state) 2)
          (incf (game-state-player-hp new-state) 2)
          (simulate new-state nil)))

      (when (and (>= (game-state-player-mana state-after-effects) 113)
                 (= (game-state-shield-timer state-after-effects) 0))
        (let ((new-state (copy-game-state state-after-effects)))
          (decf (game-state-player-mana new-state) 113)
          (incf (game-state-mana-spent new-state) 113)
          (setf (game-state-shield-timer new-state) 6)
          (simulate new-state nil)))

      (when (and (>= (game-state-player-mana state-after-effects) 173)
                 (= (game-state-poison-timer state-after-effects) 0))
        (let ((new-state (copy-game-state state-after-effects)))
          (decf (game-state-player-mana new-state) 173)
          (incf (game-state-mana-spent new-state) 173)
          (setf (game-state-poison-timer new-state) 6)
          (simulate new-state nil)))

      (when (and (>= (game-state-player-mana state-after-effects) 229)
                 (= (game-state-recharge-timer state-after-effects) 0))
        (let ((new-state (copy-game-state state-after-effects)))
          (decf (game-state-player-mana new-state) 229)
          (incf (game-state-mana-spent new-state) 229)
          (setf (game-state-recharge-timer new-state) 5)
          (simulate new-state nil))))))

(defun parse-input-line (line)
  (let ((colon-pos (position #\: line)))
    (parse-integer (string-trim '(#\Space) (subseq line (1+ colon-pos))))))

(defun read-boss-stats (filename)
  (with-open-file (f filename :direction :input)
    (let* ((hp-line (read-line f))
           (damage-line (read-line f))
           (boss-hp (parse-input-line hp-line))
           (boss-damage (parse-input-line damage-line)))
      (values boss-hp boss-damage))))

(defun min-mana-to-win (initial-state)
  (setf *min-mana* most-positive-fixnum)
  (setf (game-state-player-hp initial-state) 50)
  (setf (game-state-player-mana initial-state) 500)
  (simulate initial-state t)
  *min-mana*)

(defun main ()
  (multiple-value-bind (boss-hp boss-damage)
      (read-boss-stats "input.txt")
    (let ((initial-state (make-game-state :boss-hp boss-hp
                                          :boss-damage boss-damage)))
      (princ (min-mana-to-win initial-state))
      (terpri))))

(main)
