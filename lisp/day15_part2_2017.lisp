
(defun split-string-by-space (s)
  (loop for i = 0 then (1+ j)
        for j = (position #\Space s :start i)
        when (< i (length s))
          collect (subseq s i (or j (length s)))
        while j))

(defun make-generator (initial-prev factor criteria)
  (let ((current-prev initial-prev)
        (modulus 2147483647))
    (lambda ()
      (loop
        (setf current-prev (mod (* current-prev factor) modulus))
        (when (zerop (mod current-prev criteria))
          (return (logand current-prev #xFFFF)))))))

(defun main ()
  (let* ((filename "input.txt")
         (gen-a-start nil)
         (gen-b-start nil))
    (with-open-file (f filename :direction :input)
      (let* ((line1 (read-line f nil nil))
             (line2 (read-line f nil nil))
             (parts1 (split-string-by-space line1))
             (parts2 (split-string-by-space line2)))
        (setf gen-a-start (parse-integer (car (last parts1))))
        (setf gen-b-start (parse-integer (car (last parts2))))))
    (let ((gen-a (make-generator gen-a-start 16807 4))
          (gen-b (make-generator gen-b-start 48271 8))
          (total 0))
      (loop repeat 5000000
            do (let ((val-a (funcall gen-a))
                     (val-b (funcall gen-b)))
                 (when (= val-a val-b)
                   (incf total))))
      (format t "~a~%" total))))

(main)
