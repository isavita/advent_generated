
(defun read-numbers-from-file (filename)
  (with-open-file (in filename :direction :input)
    (loop for n = (read in nil :eof)
          until (eq n :eof)
          collect n)))

(defun parse-node (data-list)
  (let* ((num-children (car data-list))
         (num-metadata (cadr data-list))
         (current-pos (cddr data-list))
         (total-sum 0)
         (child-values (make-array num-children)))
    (loop for i below num-children do
      (multiple-value-bind (child-total child-value next-pos)
          (parse-node current-pos)
        (incf total-sum child-total)
        (setf (aref child-values i) child-value)
        (setf current-pos next-pos)))
    (let* ((metadata (subseq current-pos 0 num-metadata))
           (remaining-data (nthcdr num-metadata current-pos))
           (metadata-sum (apply #'+ metadata)))
      (incf total-sum metadata-sum)
      (if (= num-children 0)
          (values total-sum metadata-sum remaining-data)
          (let ((node-value 0))
            (dolist (idx metadata)
              (when (and (> idx 0) (<= idx num-children))
                (incf node-value (aref child-values (1- idx)))))
            (values total-sum node-value remaining-data))))))

(defun main ()
  (let* ((data (read-numbers-from-file "input.txt")))
    (multiple-value-bind (total root-value _)
        (parse-node data)
      (format t "~a~%" total)
      (format t "~a~%" root-value))))

(main)
