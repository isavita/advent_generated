
type coord = { x : int; y : int }

let add c1 c2 = { x = c1.x + c2.x; y = c1.y + c2.y }

let multiply_by_scalar c s = { x = c.x * s; y = c.y * s }

let abs_val x = if x < 0 then -x else x

let parse_input input_lines =
  let north = { x = 0; y = -1 } in
  let west = { x = -1; y = 0 } in
  let south = { x = 0; y = 1 } in
  let east = { x = 1; y = 0 } in
  let rec aux current acc = function
    | [] -> List.rev (current :: acc)
    | line :: rest ->
        let parts = String.split_on_char ' ' line in
        let color = List.nth parts 2 in
        let dir_input = color.[7] in
        let length_str = String.sub color 2 5 in
        let length = int_of_string ("0x" ^ length_str) in
        let direction =
          match dir_input with
          | '3' -> north
          | '2' -> west
          | '1' -> south
          | '0' -> east
          | _ -> failwith "Invalid direction"
        in
        let next_current = add current (multiply_by_scalar direction length) in
        aux next_current (current :: acc) rest
  in
  aux { x = 0; y = 0 } [] input_lines

let shoelace vertices =
  let rec aux acc = function
    | [] | [ _ ] -> abs_val acc / 2
    | v1 :: v2 :: rest ->
        aux (acc + (v1.x * v2.y) - (v1.y * v2.x)) (v2 :: rest)
  in
  aux 0 vertices

let perimeter vertices =
    let rec aux acc = function
      | [] | [_] -> acc
      | v1 :: v2 :: rest ->
          aux (acc + abs_val (v1.x - v2.x) + abs_val (v1.y - v2.y)) (v2 :: rest)
    in aux 0 vertices

let calculate_polygon_area vertices =
  shoelace vertices + (perimeter vertices / 2) + 1

let solve input_lines =
  let vertices = parse_input input_lines in
  calculate_polygon_area vertices

let read_file filename =
  let ic = open_in filename in
  let rec aux acc =
    try
      let line = input_line ic in
      aux (line :: acc)
    with End_of_file ->
      close_in ic;
      List.rev acc
  in
  aux []

let () =
  let input_lines = read_file "input.txt" in
  print_int (solve input_lines);
  print_newline ()
