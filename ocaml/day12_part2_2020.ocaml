
let abs x = if x < 0 then -x else x

type ship = {
  mutable x : int;
  mutable y : int;
  mutable waypoint_x : int;
  mutable waypoint_y : int;
}

let rotate_waypoint ship degrees =
  let degrees = (degrees + 360) mod 360 in
  match degrees with
  | 90 | -270 ->
      let temp = ship.waypoint_x in
      ship.waypoint_x <- ship.waypoint_y;
      ship.waypoint_y <- -temp
  | 180 | -180 ->
      ship.waypoint_x <- -ship.waypoint_x;
      ship.waypoint_y <- -ship.waypoint_y
  | 270 | -90 ->
      let temp = ship.waypoint_x in
      ship.waypoint_x <- -ship.waypoint_y;
      ship.waypoint_y <- temp
  | _ -> ()

let process_instruction ship action value =
  match action with
  | 'N' -> ship.waypoint_y <- ship.waypoint_y + value
  | 'S' -> ship.waypoint_y <- ship.waypoint_y - value
  | 'E' -> ship.waypoint_x <- ship.waypoint_x + value
  | 'W' -> ship.waypoint_x <- ship.waypoint_x - value
  | 'L' -> rotate_waypoint ship (-value)
  | 'R' -> rotate_waypoint ship value
  | 'F' ->
      ship.x <- ship.x + (ship.waypoint_x * value);
      ship.y <- ship.y + (ship.waypoint_y * value)
  | _ -> ()

let () =
  let ship = { x = 0; y = 0; waypoint_x = 10; waypoint_y = 1 } in
  let ic = open_in "input.txt" in
  try
    while true do
      let line = input_line ic in
      let action = line.[0] in
      let value = int_of_string (String.sub line 1 (String.length line - 1)) in
      process_instruction ship action value
    done
  with End_of_file ->
    close_in ic;
    let manhattan_distance = abs ship.x + abs ship.y in
    print_int manhattan_distance;
    print_newline ()
