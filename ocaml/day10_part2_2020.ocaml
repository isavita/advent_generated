
let solve () =
  let lines =
    let ic = open_in "input.txt" in
    let rec read_lines acc =
      try
        let line = input_line ic in
        read_lines (int_of_string line :: acc)
      with
        End_of_file ->
          close_in ic;
          List.rev acc
    in
    read_lines []
  in
  let adapters = 0 :: lines |> List.sort compare in
  let adapters = adapters @ [ List.nth adapters (List.length adapters - 1) + 3 ] in
  let n = List.length adapters in
  let ways = Array.make n 0L in
  Array.set ways 0 1L;
  for i = 1 to n - 1 do
    let current_joltage = List.nth adapters i in
    for diff = 1 to 3 do
      if current_joltage - diff >= 0 then
        let prev_index =
          let rec find_index j =
            if j < 0 then -1
            else if List.nth adapters j = current_joltage - diff then j
            else find_index (j - 1)
          in
          find_index (i - 1)
        in
        if prev_index >= 0 then
          Array.set ways i (Int64.add (Array.get ways i) (Array.get ways prev_index))
    done
  done;
  Printf.printf "%Ld\n" (Array.get ways (n - 1))

let () = solve ()
