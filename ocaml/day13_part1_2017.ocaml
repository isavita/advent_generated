
let () =
  let ic = open_in "input.txt" in
  let rec read_firewall acc =
    try
      let line = input_line ic in
      let parts = String.split_on_char ':' line in
      let depth = int_of_string (String.trim (List.nth parts 0)) in
      let rng = int_of_string (String.trim (List.nth parts 1)) in
      read_firewall ((depth, rng) :: acc)
    with End_of_file -> acc
  in
  let firewall = read_firewall [] in
  close_in ic;

  let max_depth = List.fold_left (fun acc (d, _) -> max acc d) 0 firewall in
  let severity = ref 0 in

  let scanners = Array.make (max_depth + 1) 0 in
  let directions = Array.make (max_depth + 1) 1 in
  let ranges = Array.make (max_depth + 1) 0 in

  List.iter (fun (d, r) -> ranges.(d) <- r) firewall;

  for depth = 0 to max_depth do
    if ranges.(depth) > 0 && scanners.(depth) = 0 then
      severity := !severity + depth * ranges.(depth);

    for d = 0 to max_depth do
      if ranges.(d) > 0 then
        let pos = scanners.(d) in
        if pos = 0 then directions.(d) <- 1
        else if pos = ranges.(d) - 1 then directions.(d) <- -1;
        scanners.(d) <- pos + directions.(d)
    done
  done;

  Printf.printf "%d\n" !severity
