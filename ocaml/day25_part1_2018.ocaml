
let abs x = if x < 0 then -x else x

type point = { x : int; y : int; z : int; t : int }

let manhattan_distance a b =
  abs (a.x - b.x) + abs (a.y - b.y) + abs (a.z - b.z) + abs (a.t - b.t)

type union_find = { parent : int array }

let new_union_find size =
  let parent = Array.init size (fun i -> i) in
  { parent }

let rec find uf x =
  if uf.parent.(x) <> x then
    uf.parent.(x) <- find uf uf.parent.(x);
  uf.parent.(x)

let union uf x y =
  let root_x = find uf x in
  let root_y = find uf y in
  if root_x <> root_y then
    uf.parent.(root_x) <- root_y

let () =
  let file = open_in "input.txt" in
  let points = ref [] in
  try
    while true do
      let line = input_line file in
      let coords = String.split_on_char ',' line in
      let x = int_of_string (List.nth coords 0) in
      let y = int_of_string (List.nth coords 1) in
      let z = int_of_string (List.nth coords 2) in
      let t = int_of_string (List.nth coords 3) in
      points := { x; y; z; t } :: !points
    done
  with End_of_file ->
    close_in file;
    let uf = new_union_find (List.length !points) in
    List.iteri (fun i p1 ->
      List.iteri (fun j p2 ->
        if manhattan_distance p1 p2 <= 3 then
          union uf i j
      ) !points
    ) !points;
    let constellation_count = ref 0 in
    Array.iteri (fun i parent ->
      if i = parent then
        incr constellation_count
    ) uf.parent;
    print_int !constellation_count;
    print_newline ()
