
let get_bathroom_code instructions =
  let keypad = [
    ("1", [('D', "3")]);
    ("2", [('R', "3"); ('D', "6")]);
    ("3", [('U', "1"); ('R', "4"); ('D', "7"); ('L', "2")]);
    ("4", [('L', "3"); ('D', "8")]);
    ("5", [('R', "6")]);
    ("6", [('U', "2"); ('R', "7"); ('D', "A"); ('L', "5")]);
    ("7", [('U', "3"); ('R', "8"); ('D', "B"); ('L', "6")]);
    ("8", [('U', "4"); ('R', "9"); ('D', "C"); ('L', "7")]);
    ("9", [('L', "8")]);
    ("A", [('U', "6"); ('R', "B")]);
    ("B", [('U', "7"); ('R', "C"); ('D', "D"); ('L', "A")]);
    ("C", [('U', "8"); ('L', "B")]);
    ("D", [('U', "B")]);
  ]
  in
  let rec find_next_pos pos move = function
    | [] -> pos
    | (key, moves)::tl ->
      if key = pos then
        match List.assoc_opt move moves with
        | Some next_pos -> next_pos
        | None -> pos
      else
        find_next_pos pos move tl
  in
  let rec loop pos code = function
    | [] -> code
    | instr::tl ->
      let new_pos = List.fold_left (fun p m -> find_next_pos p m keypad) pos (List.of_seq (String.to_seq instr)) in
      loop new_pos (code ^ new_pos) tl
  in
  loop "5" "" instructions

let () =
  let file = open_in "input.txt" in
  let instructions = ref [] in
  try
    while true do
      let line = input_line file in
      instructions := line :: !instructions
    done
  with End_of_file ->
    close_in file;
    let code = get_bathroom_code (List.rev !instructions) in
    print_endline code
