
let is_moving_away x y vx vy xmin xmax ymin ymax =
  (x < xmin && vx < 0) || (x > xmax && vx > 0) || (y < ymin && vy < 0)

let solve () =
  let ic = open_in "input.txt" in
  let line = input_line ic in
  close_in ic;
  let parts = String.split_on_char ',' line in
  let x_range = String.split_on_char '.' (String.sub (List.nth parts 0) 15 ((String.length (List.nth parts 0)) - 15)) in
  let y_range = String.split_on_char '.' (String.sub (List.nth parts 1) 3 ((String.length (List.nth parts 1)) - 3)) in
  let xmin = int_of_string (List.nth x_range 0) in
  let xmax = int_of_string (List.nth x_range 2) in
  let ymin = int_of_string (List.nth y_range 0) in
  let ymax = int_of_string (List.nth y_range 2) in

  let velocities = Hashtbl.create 1000 in
  for vx = -500 to 500 do
    for vy = -500 to 500 do
      let x, y = ref 0, ref 0 in
      let cur_vx, cur_vy = ref vx, ref vy in
      let in_target_area = ref false in
      try
        while true do
          x := !x + !cur_vx;
          y := !y + !cur_vy;
          if !x >= xmin && !x <= xmax && !y >= ymin && !y <= ymax then (
            in_target_area := true;
            raise Exit
          );
          if is_moving_away !x !y !cur_vx !cur_vy xmin xmax ymin ymax then
            raise Exit;
          if !cur_vx > 0 then
            cur_vx := !cur_vx - 1
          else if !cur_vx < 0 then
            cur_vx := !cur_vx + 1;
          cur_vy := !cur_vy - 1
        done
      with Exit ->
        if !in_target_area then
          let key = (vx, vy) in
          Hashtbl.add velocities key true
    done
  done;
  print_int (Hashtbl.length velocities);
  print_newline ()

let () = solve ()
