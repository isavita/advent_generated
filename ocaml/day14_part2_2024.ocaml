
open Printf

type robot = { mutable x : int; mutable y : int; vx : int; vy : int }

let mod_pos a b = ((a mod b) + b) mod b

let parse_line s =
  Scanf.sscanf s "p=%d,%d v=%d,%d"
    (fun x y vx vy -> { x; y; vx; vy })

let move_robots robots size_x size_y =
  Array.iter (fun r ->
      r.x <- mod_pos (r.x + r.vx) size_x;
      r.y <- mod_pos (r.y + r.vy) size_y) robots

let count_quadrants robots size_x size_y =
  let cnt = Array.make 4 0 in
  let cx = size_x / 2 and cy = size_y / 2 in
  Array.iter (fun r ->
      if r.x < cx then
        if r.y < cy then cnt.(0) <- cnt.(0) + 1
        else if r.y > cy then cnt.(1) <- cnt.(1) + 1
      else if r.x > cx then
        if r.y < cy then cnt.(2) <- cnt.(2) + 1
        else if r.y > cy then cnt.(3) <- cnt.(3) + 1) robots;
  cnt

let no_overlaps robots =
  let tbl = Hashtbl.create (Array.length robots) in
  try
    Array.iter (fun r ->
        let key = r.x * 1000 + r.y in
        if Hashtbl.mem tbl key then raise Exit;
        Hashtbl.add tbl key ()) robots;
    true
  with Exit -> false

let draw_grid robots size_x size_y =
  let grid = Array.make_matrix size_y size_x false in
  Array.iter (fun r -> grid.(r.y).(r.x) <- true) robots;
  for y = 0 to size_y - 1 do
    for x = 0 to size_x - 1 do
      output_char stdout (if grid.(y).(x) then '#' else '.')
    done;
    output_char stdout '\n'
  done

let () =
  let size_x = 101 and size_y = 103 in
  let ic = open_in "input.txt" in
  let rec read acc =
    try
      let line = input_line ic in
      if line = "" then read acc else read (parse_line line :: acc)
    with End_of_file -> List.rev acc
  in
  let robots = Array.of_list (read []) in
  close_in ic;

  (* Part 1 *)
  let robots1 = Array.map (fun r -> { x = r.x; y = r.y; vx = r.vx; vy = r.vy }) robots in
  for _ = 1 to 100 do move_robots robots1 size_x size_y done;
  let cnt = count_quadrants robots1 size_x size_y in
  let safety = Array.fold_left ( * ) 1 cnt in
  printf "Part 1 - Safety Factor after 100 seconds: %d\n" safety;

  (* Part 2 *)
  let robots2 = Array.map (fun r -> { x = r.x; y = r.y; vx = r.vx; vy = r.vy }) robots in
  let seconds = ref 0 in
  while not (no_overlaps robots2) do
    move_robots robots2 size_x size_y;
    incr seconds;
    if !seconds > 1_000_000 then (printf "Exceeded maximum iterations.\n"; exit 1)
  done;
  printf "Part 2 - Fewest seconds to display Easter egg: %d\n" !seconds;
  printf "Final positions of robots:\n";
  draw_grid robots2 size_x size_y
