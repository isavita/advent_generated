
let solve () =
  let input_lines = In_channel.with_open_text "input.txt" In_channel.input_all in
  let lines = String.split_on_char '\n' input_lines in

  let a = ref 0 in
  let b = ref 0 in
  let c = ref 0 in
  let program = ref [] in

  List.iter
    (fun line ->
      let line = String.trim line in
      if line = "" then ()
      else if String.starts_with ~prefix:"Register A:" line then
        a := int_of_string (String.trim (List.nth (String.split_on_char ':' line) 1))
      else if String.starts_with ~prefix:"Register B:" line then
        b := int_of_string (String.trim (List.nth (String.split_on_char ':' line) 1))
      else if String.starts_with ~prefix:"Register C:" line then
        c := int_of_string (String.trim (List.nth (String.split_on_char ':' line) 1))
      else if String.starts_with ~prefix:"Program:" line then
        program :=
          List.map int_of_string
            (List.map String.trim (String.split_on_char ',' (String.trim (List.nth (String.split_on_char ':' line) 1)))))
    lines;

  let get_combo_val op =
    match op with
    | 0 -> 0
    | 1 -> 1
    | 2 -> 2
    | 3 -> 3
    | 4 -> !a
    | 5 -> !b
    | 6 -> !c
    | _ -> failwith "invalid combo operand"
  in

  let output_vals = ref [] in
  let ip = ref 0 in
  let program_arr = Array.of_list !program in
  let program_len = Array.length program_arr in

  while !ip < program_len do
    let opcode = program_arr.(!ip) in
    if !ip + 1 >= program_len then ()
    else
      let operand = program_arr.(!ip + 1) in
      match opcode with
      | 0 ->
          let den = get_combo_val operand in
          a := (if den != 0 then !a / (1 lsl den) else 0);
          ip := !ip + 2
      | 1 ->
          b := !b lxor operand;
          ip := !ip + 2
      | 2 ->
          b := get_combo_val operand mod 8;
          ip := !ip + 2
      | 3 ->
          ip := (if !a != 0 then operand else !ip + 2)
      | 4 ->
          b := !b lxor !c;
          ip := !ip + 2
      | 5 ->
          output_vals := string_of_int (get_combo_val operand mod 8) :: !output_vals;
          ip := !ip + 2
      | 6 ->
          b := !a / (1 lsl get_combo_val operand);
          ip := !ip + 2
      | 7 ->
          c := !a / (1 lsl get_combo_val operand);
          ip := !ip + 2
      | _ -> ip := program_len
  done;

  print_endline (String.concat "," (List.rev !output_vals))

let main () = solve ()

let () = main ()
