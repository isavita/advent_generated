
let card_value c =
  match c with
  | 'A' -> 14
  | 'K' -> 13
  | 'Q' -> 12
  | 'J' -> 11
  | 'T' -> 10
  | _ -> int_of_char c - int_of_char '0'

let hand_type hand =
  let counts = Hashtbl.create 5 in
  String.iter (fun c ->
      let count = try Hashtbl.find counts c with Not_found -> 0 in
      Hashtbl.replace counts c (count + 1)) hand;
  let values = Hashtbl.fold (fun _ v acc -> v :: acc) counts [] in
  let sorted_values = List.sort compare values in
  match sorted_values with
  | [5] -> 7
  | [1; 4] -> 6
  | [2; 3] -> 5
  | [1; 1; 3] -> 4
  | [1; 2; 2] -> 3
  | [1; 1; 1; 2] -> 2
  | [1; 1; 1; 1; 1] -> 1
  | _ -> failwith "Invalid hand"

let hand_value hand =
  let rec aux hand acc =
    match hand with
    | [] -> acc
    | h :: t -> aux t (acc * 16 + card_value h)
  in
  aux (List.init (String.length hand) (String.get hand)) 0

let compare_hands a b =
  let type_a = hand_type a in
  let type_b = hand_type b in
  if type_a <> type_b then compare type_a type_b
  else compare (hand_value a) (hand_value b)

let () =
  let ic = open_in "input.txt" in
  let rec read_lines ic acc =
    try
      let line = input_line ic in
      read_lines ic (line :: acc)
    with End_of_file ->
      close_in ic;
      List.rev acc
  in
  let lines = read_lines ic [] in
  let hands =
    List.map
      (fun line ->
        let parts = String.split_on_char ' ' line in
        (List.nth parts 0, int_of_string (List.nth parts 1)))
      lines
  in
  let sorted_hands = List.sort (fun (a, _) (b, _) -> compare_hands a b) hands in
  let total =
    List.fold_left
      (fun acc (i, (_, bid)) -> acc + (bid * (i + 1)))
      0
      (List.mapi (fun i (hand, bid) -> (i, (hand, bid))) sorted_hands)
    in
  print_int total
