
let read_file filename =
  let chan = open_in filename in
  let rec read_lines acc =
    try
      let line = input_line chan in
      read_lines (line :: acc)
    with End_of_file ->
      close_in chan;
      List.rev acc
  in
  read_lines []

let parse_line line =
  match String.split_on_char ' ' line with
  | from_str :: "<->" :: to_str_list ->
      let from = int_of_string from_str in
      let to_nodes =
        List.map int_of_string (String.split_on_char ',' (String.concat "" to_str_list))
      in
      (from, to_nodes)
  | _ -> failwith "Invalid input line"

let build_adj lines =
  let adj = Hashtbl.create 100 in
  List.iter
    (fun line ->
      let from, to_nodes = parse_line line in
      List.iter
        (fun to_node ->
          let from_list = try Hashtbl.find adj from with Not_found -> [] in
          let to_list = try Hashtbl.find adj to_node with Not_found -> [] in
          Hashtbl.replace adj from (to_node :: from_list);
          Hashtbl.replace adj to_node (from :: to_list))
        to_nodes)
    lines;
  adj

let dfs start_node adj =
  let visited = Hashtbl.create 100 in
  let rec visit node =
    if not (Hashtbl.mem visited node) then (
      Hashtbl.add visited node true;
      try
        List.iter visit (Hashtbl.find adj node)
      with Not_found -> ()
    )
  in
  visit start_node;
  Hashtbl.length visited

let () =
  let lines = read_file "input.txt" in
  let adj = build_adj lines in
  let count = dfs 0 adj in
  Printf.printf "%d\n" count
