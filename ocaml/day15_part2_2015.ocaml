
type ingredient = {
  name : string;
  capacity : int;
  durability : int;
  flavor : int;
  texture : int;
  calories : int;
}

let read_ingredients filename =
  let ic = open_in filename in
  let rec aux acc =
    try
      let line = input_line ic in
      let parts = String.split_on_char ' ' line in
      if List.length parts >= 11 then
        let capacity = int_of_string (String.sub (List.nth parts 2) 0 ((String.length (List.nth parts 2)) - 1)) in
        let durability = int_of_string (String.sub (List.nth parts 4) 0 ((String.length (List.nth parts 4)) - 1)) in
        let flavor = int_of_string (String.sub (List.nth parts 6) 0 ((String.length (List.nth parts 6)) - 1)) in
        let texture = int_of_string (String.sub (List.nth parts 8) 0 ((String.length (List.nth parts 8)) - 1)) in
        let calories = int_of_string (List.nth parts 10) in
        aux ({ name = List.nth parts 0; capacity; durability; flavor; texture; calories } :: acc)
      else aux acc
    with End_of_file -> close_in ic; List.rev acc
  in aux []

let score ingredients teaspoons =
  let capacity = ref 0 in
  let durability = ref 0 in
  let flavor = ref 0 in
  let texture = ref 0 in
  List.iteri (fun i ing ->
    capacity := !capacity + ing.capacity * List.nth teaspoons i;
    durability := !durability + ing.durability * List.nth teaspoons i;
    flavor := !flavor + ing.flavor * List.nth teaspoons i;
    texture := !texture + ing.texture * List.nth teaspoons i;
  ) ingredients;
  max 0 (!capacity * !durability * !flavor * !texture)

let calculate_calories ingredients teaspoons =
  List.fold_left (fun acc (ing, tsp) -> acc + ing.calories * tsp) 0 (List.combine ingredients teaspoons)

let rec calculate_max_score ingredients index remaining teaspoons target_calories =
  if index = List.length ingredients - 1 then
    let teaspoons = teaspoons @ [remaining] in
    if calculate_calories ingredients teaspoons = target_calories then
      score ingredients teaspoons
    else 0
  else
    let rec aux max_score i =
      if i > remaining then max_score
      else
        let score = calculate_max_score ingredients (index + 1) (remaining - i) (teaspoons @ [i]) target_calories in
        aux (max max_score score) (i + 1)
    in aux 0 0

let find_max_score ingredients total_teaspoons target_calories =
  calculate_max_score ingredients 0 total_teaspoons [] target_calories

let () =
  let ingredients = read_ingredients "input.txt" in
  let max_score = find_max_score ingredients 100 500 in
  print_int max_score;
  print_newline ()
