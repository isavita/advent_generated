
let graph = Hashtbl.create 100

let best_clique = ref []

let neighbors_of node =
  match Hashtbl.find_opt graph node with
  | Some neighbors -> neighbors
  | None -> []

let intersect a b =
  List.filter (fun x -> List.mem x b) a

let union a x =
  x :: a

let remove slice s =
  List.filter (fun x -> x <> s) slice

let rec bron_kerbosch r p x =
  if List.length p = 0 && List.length x = 0 then
    if List.length r > List.length !best_clique then
      best_clique := List.rev r
    else ()
  else
    let temp_p = ref p in
    List.iter (fun v ->
      let neighbors = neighbors_of v in
      bron_kerbosch
        (union r v)
        (intersect !temp_p neighbors)
        (intersect x neighbors);
      temp_p := remove !temp_p v;
      ignore (union x v)
    ) !temp_p

let () =
  let ic = open_in "input.txt" in
  try
    while true do
      let line = input_line ic in
      let parts = String.split_on_char '-' line in
      if List.length parts = 2 then
        let a = List.nth parts 0 in
        let b = List.nth parts 1 in
        if not (Hashtbl.mem graph a) then
          Hashtbl.add graph a [];
        if not (Hashtbl.mem graph b) then
          Hashtbl.add graph b [];
        Hashtbl.replace graph a (b :: (Hashtbl.find graph a));
        Hashtbl.replace graph b (a :: (Hashtbl.find graph b))
      else ()
    done
  with End_of_file ->
    close_in ic;
    let all_nodes = ref [] in
    Hashtbl.iter (fun k _ -> all_nodes := k :: !all_nodes) graph;
    bron_kerbosch [] !all_nodes [];
    print_endline (String.concat "," (List.sort compare !best_clique))
