
let read_lines filename =
  let chan = open_in filename in
  let rec read_all acc =
    try
      let line = input_line chan in
      read_all (line :: acc)
    with End_of_file ->
      close_in chan;
      List.rev acc
  in
  read_all []

let calculate_area_and_perimeter grid =
  let rows = List.length grid in
  let cols = String.length (List.hd grid) in
  let visited = Array.make_matrix rows cols false in

  let rec dfs row col plant area perimeter =
    if row < 0 || row >= rows || col < 0 || col >= cols || visited.(row).(col) || (String.get (List.nth grid row) col) <> plant then
      (area, perimeter)
    else begin
      visited.(row).(col) <- true;
      let new_area = area + 1 in
      let new_perimeter = ref perimeter in

      (* Check neighbors and update perimeter *)
      let check_neighbor r c =
        if r < 0 || r >= rows || c < 0 || c >= cols then
          new_perimeter := !new_perimeter + 1
        else if (String.get (List.nth grid r) c) <> plant then
          new_perimeter := !new_perimeter + 1
      in
      
      check_neighbor (row - 1) col;
      check_neighbor (row + 1) col;
      check_neighbor row (col - 1);
      check_neighbor row (col + 1);

      let (area1, perimeter1) = dfs (row - 1) col plant new_area !new_perimeter in
      let (area2, perimeter2) = dfs (row + 1) col plant area1 perimeter1 in
      let (area3, perimeter3) = dfs row (col - 1) plant area2 perimeter2 in
      let (area4, perimeter4) = dfs row (col + 1) plant area3 perimeter3 in

      (area4, perimeter4)
    end
  in
  
  let regions = ref [] in
  for r = 0 to rows - 1 do
    for c = 0 to cols - 1 do
      if not visited.(r).(c) then
        let plant = String.get (List.nth grid r) c in
        let (area, perimeter) = dfs r c plant 0 0 in
        regions := (area, perimeter) :: !regions
    done
  done;
  !regions

let main () =
  let grid = read_lines "input.txt" in
  let regions = calculate_area_and_perimeter grid in
  let total_price = List.fold_left (fun acc (area, perimeter) -> acc + (area * perimeter)) 0 regions in
  print_int total_price;
  print_newline ()

let () = main ()
