
let solve () =
  let input_str = In_channel.with_open_text "input.txt" In_channel.input_all in
  let grid = Array.of_list (List.map Array.of_list (String.split_on_char '\n' input_str |> List.map (fun s -> List.init (String.length s) (String.get s)))) in
  let h = Array.length grid in
  let w = if h > 0 then Array.length grid.(0) else 0 in
  let dirs = [|(0, -1); (1, 0); (0, 1); (-1, 0)|] in
  let rec find_start x y =
    if y >= h then (None, None)
    else if x >= w then find_start 0 (y + 1)
    else if grid.(y).(x) = '^' then (Some x, Some y)
    else find_start (x + 1) y
  in
  let start_x, start_y = match find_start 0 0 with
    | (Some x, Some y) -> (x, y)
    | _ -> failwith "No start position found"
  in
  let visited = Hashtbl.create (w * h) in
  let _ = Hashtbl.add visited (start_x, start_y) true in
  let rec follow_path x y dir_idx =
    let dir_x, dir_y = dirs.(dir_idx) in
    let nx, ny = x + dir_x, y + dir_y in
    if nx < 0 || nx >= w || ny < 0 || ny >= h then
      Hashtbl.length visited
    else if grid.(ny).(nx) = '#' then
      let new_dir_idx = (dir_idx + 1) mod 4 in
      follow_path x y new_dir_idx
    else
      let new_pos = (nx, ny) in
      if not (Hashtbl.mem visited new_pos) then
        let _ = Hashtbl.add visited new_pos true in
        follow_path nx ny dir_idx
      else
        follow_path nx ny dir_idx (* Avoid infinite loops if revisiting a position *)
  in
  Printf.printf "%d\n" (follow_path start_x start_y 0)

let main () = solve ()

let () = main ()
