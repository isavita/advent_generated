
#load "str.cma"

type nanobot = { x: int; y: int; z: int; radius: int }

let parse_nano line =
  let re = Str.regexp "pos=<\\(-?[0-9]+\\),\\(-?[0-9]+\\),\\(-?[0-9]+\\)>, r=\\([0-9]+\\)" in
  if Str.string_match re line 0 then
    { x = int_of_string (Str.matched_group 1 line);
      y = int_of_string (Str.matched_group 2 line);
      z = int_of_string (Str.matched_group 3 line);
      radius = int_of_string (Str.matched_group 4 line) }
  else
    failwith "Invalid input format"

let read_input filename =
  let chan = open_in filename in
  let rec read_lines acc =
    try
      let line = input_line chan in
      read_lines (parse_nano line :: acc)
    with End_of_file ->
      close_in chan;
      List.rev acc
  in
  read_lines []

let manhattan_distance a b =
  abs (a.x - b.x) + abs (a.y - b.y) + abs (a.z - b.z)

let find_strongest_nanobot nanobots =
  List.fold_left (fun acc nanobot ->
    if nanobot.radius > acc.radius then nanobot else acc) (List.hd nanobots) nanobots

let count_nanobots_in_range nanobots strongest =
  List.fold_left (fun count nanobot ->
    if manhattan_distance nanobot strongest <= strongest.radius then count + 1 else count) 0 nanobots

let nanobots = read_input "input.txt"
let strongest = find_strongest_nanobot nanobots
let in_range_count = count_nanobots_in_range nanobots strongest
let () = print_int in_range_count; print_newline ()
