
let ( let* ) = Option.bind

let read_lines filename =
  let ic = open_in filename in
  let rec loop acc =
    try
      let line = input_line ic in
      loop (line :: acc)
    with End_of_file ->
      close_in ic;
      List.rev acc
  in
  loop []

let abs x = if x < 0 then -x else x

let get_points path =
  let points = Hashtbl.create 1000 in
  let current = ref (0, 0) in
  String.split_on_char ',' path
  |> List.iter (fun move ->
         let dir = move.[0] in
         let steps = int_of_string (String.sub move 1 (String.length move - 1)) in
         for _ = 0 to steps - 1 do
           let x, y = !current in
           current :=
             (match dir with
             | 'U' -> (x, y + 1)
             | 'D' -> (x, y - 1)
             | 'L' -> (x - 1, y)
             | 'R' -> (x + 1, y)
             | _ -> failwith "Invalid direction");
           Hashtbl.replace points !current ()
         done);
  points

let () =
  let lines = read_lines "input.txt" in
  let wire1 = get_points (List.nth lines 0) in
  let wire2 = get_points (List.nth lines 1) in
  let min_distance = ref max_int in
  Hashtbl.iter
    (fun p _ ->
      if Hashtbl.mem wire2 p then
        let distance = abs (fst p) + abs (snd p) in
        if distance < !min_distance then min_distance := distance)
    wire1;
  print_int !min_distance;
  print_newline ()
