
(* Define data structures for items *)
type item = { cost : int; damage : int; armor : int }

(* Item lists *)
let weapons = [
  { cost = 8;  damage = 4; armor = 0 };
  { cost = 10; damage = 5; armor = 0 };
  { cost = 25; damage = 6; armor = 0 };
  { cost = 40; damage = 7; armor = 0 };
  { cost = 74; damage = 8; armor = 0 };
]

let armors = [
  { cost = 0;   damage = 0; armor = 0 }; (* No armor option *)
  { cost = 13;  damage = 0; armor = 1 };
  { cost = 31;  damage = 0; armor = 2 };
  { cost = 53;  damage = 0; armor = 3 };
  { cost = 75;  damage = 0; armor = 4 };
  { cost = 102; damage = 0; armor = 5 };
]

let rings = [
  { cost = 0;   damage = 0; armor = 0 }; (* No ring option *)
  { cost = 0;   damage = 0; armor = 0 }; (* No ring option *)
  { cost = 25;  damage = 1; armor = 0 };
  { cost = 50;  damage = 2; armor = 0 };
  { cost = 100; damage = 3; armor = 0 };
  { cost = 20;  damage = 0; armor = 1 };
  { cost = 40;  damage = 0; armor = 2 };
  { cost = 80;  damage = 0; armor = 3 };
]

(* Function to simulate a fight *)
let rec simulate_fight player_hp player_damage player_armor boss_hp boss_damage boss_armor =
  (* Player's turn *)
  let damage_to_boss = max 1 (player_damage - boss_armor) in
  let boss_hp = boss_hp - damage_to_boss in
  if boss_hp <= 0 then true  (* Player wins *)
  else
    (* Boss's turn *)
    let damage_to_player = max 1 (boss_damage - player_armor) in
    let player_hp = player_hp - damage_to_player in
    if player_hp <= 0 then false (* Boss wins *)
    else
      (* Continue the fight *)
      simulate_fight player_hp player_damage player_armor boss_hp boss_damage boss_armor

(* Function to parse boss stats from input file *)
let parse_boss_stats filename =
  let ic = open_in filename in
  let try_read () =
    try Some (input_line ic) with End_of_file -> None in
  let rec loop acc =
    match try_read () with
    | Some line ->
        let parts = String.split_on_char ':' line in
        let value = int_of_string (String.trim (List.nth parts 1)) in
      loop (value :: acc)
    | None -> List.rev acc
  in
    let stats = loop [] in
    close_in ic;
  match stats with
    | [hp; damage; armor] -> (hp, damage, armor)
    | _ -> failwith "Invalid input file format"


let () =
  (* Get boss stats *)
   let (boss_hp, boss_damage, boss_armor) = parse_boss_stats "input.txt" in

  (* Part 1: Find minimum cost to win *)
  let min_cost = ref max_int in
  let max_cost = ref min_int in

  List.iter (fun weapon ->
    List.iter (fun armor ->
      for i = 0 to List.length rings - 1 do
        for j = i + 1 to List.length rings - 1 do (* Ensure no duplicate rings *)
          let ring1 = List.nth rings i in
          let ring2 = List.nth rings j in
          let total_cost = weapon.cost + armor.cost + ring1.cost + ring2.cost in
          let total_damage = weapon.damage + armor.damage + ring1.damage + ring2.damage in
          let total_armor = weapon.armor + armor.armor + ring1.armor + ring2.armor in

          (* Simulate the fight *)
          if simulate_fight 100 total_damage total_armor boss_hp boss_damage boss_armor then
            min_cost := min !min_cost total_cost
          else
            max_cost := max !max_cost total_cost;

        done;
      done;
    ) armors
  ) weapons;

  Printf.printf "Part 1: Minimum cost to win: %d\n" !min_cost;
  Printf.printf "Part 2: Maximum cost to lose: %d\n" !max_cost
