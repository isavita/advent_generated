
(* Intcode Computer Implementation *)
module Intcode = struct
  type state = {
    memory : int array;
    mutable ip : int;
    mutable relative_base : int;
    mutable input : int list;
    mutable output : int list;
    mutable halted : bool;
  }

  let copy_state s =
   { memory = Array.copy s.memory;
     ip = s.ip;
     relative_base = s.relative_base;
     input = s.input;
     output = s.output;
     halted = s.halted;
   }
    
  let get_param state mode offset =
    let index =
      match mode with
      | 0 -> state.memory.(state.ip + offset)
      | 1 -> state.ip + offset
      | 2 -> state.memory.(state.ip + offset) + state.relative_base
      | _ -> failwith "Invalid parameter mode"
    in
    if index < 0 || index >= Array.length state.memory then
        0
    else
      state.memory.(index)

  let set_param state mode offset value =
    let index =
      match mode with
      | 0 -> state.memory.(state.ip + offset)
      | 1 -> state.ip + offset
      | 2 -> state.memory.(state.ip + offset) + state.relative_base
      | _ -> failwith "Invalid parameter mode"
    in
     if index >= 0 && index < Array.length state.memory then
       state.memory.(index) <- value

  let rec run_program (state : state) : state =
    if state.halted then state
    else
      let opcode = state.memory.(state.ip) mod 100 in
      let mode1 = (state.memory.(state.ip) / 100) mod 10 in
      let mode2 = (state.memory.(state.ip) / 1000) mod 10 in
      let mode3 = (state.memory.(state.ip) / 10000) mod 10 in
      match opcode with
      | 1 ->
          set_param state mode3 3 (get_param state mode1 1 + get_param state mode2 2);
          state.ip <- state.ip + 4;
          run_program state
      | 2 ->
          set_param state mode3 3 (get_param state mode1 1 * get_param state mode2 2);
          state.ip <- state.ip + 4;
          run_program state
      | 3 -> (
          match state.input with
          | [] -> state (* Wait for input *)
          | h :: t ->
              set_param state mode1 1 h;
              state.input <- t;
              state.ip <- state.ip + 2;
              run_program state)
      | 4 ->
          state.output <- state.output @ [ get_param state mode1 1 ];
          state.ip <- state.ip + 2;
          run_program state
      | 5 ->
          if get_param state mode1 1 <> 0 then state.ip <- get_param state mode2 2
          else state.ip <- state.ip + 3;
          run_program state
      | 6 ->
          if get_param state mode1 1 = 0 then state.ip <- get_param state mode2 2
          else state.ip <- state.ip + 3;
          run_program state
      | 7 ->
          set_param state mode3 3
            (if get_param state mode1 1 < get_param state mode2 2 then 1 else 0);
          state.ip <- state.ip + 4;
          run_program state
      | 8 ->
          set_param state mode3 3
            (if get_param state mode1 1 = get_param state mode2 2 then 1 else 0);
          state.ip <- state.ip + 4;
          run_program state
      | 9 ->
          state.relative_base <- state.relative_base + get_param state mode1 1;
          state.ip <- state.ip + 2;
          run_program state
      | 99 ->
          state.halted <- true;
          state
      | _ -> failwith ("Invalid opcode: " ^ string_of_int opcode)

  let create_state memory input =
      let extended_memory = Array.make (Array.length memory * 10) 0 in 
      Array.blit memory 0 extended_memory 0 (Array.length memory);
    { memory = extended_memory; ip = 0; relative_base = 0; input; output = []; halted = false }
end

(* Robot Simulation *)
module Robot = struct
  type direction = Up | Right | Down | Left

  let turn (current_dir : direction) (turn_dir : int) : direction =
    match (current_dir, turn_dir) with
    | Up, 0 -> Left
    | Up, 1 -> Right
    | Right, 0 -> Up
    | Right, 1 -> Down
    | Down, 0 -> Right
    | Down, 1 -> Left
    | Left, 0 -> Down
    | Left, 1 -> Up
    | _ -> failwith "Invalid turn direction"

  let move (x, y) (dir : direction) : int * int =
    match dir with
    | Up -> (x, y + 1)
    | Right -> (x + 1, y)
    | Down -> (x, y - 1)
    | Left -> (x - 1, y)

  let run_robot (program : int array) (initial_panel_color : int) : (int * int, int) Hashtbl.t =
    let panels : (int * int, int) Hashtbl.t = Hashtbl.create 1000 in
    Hashtbl.add panels (0, 0) initial_panel_color;
    let state = Intcode.create_state program [ initial_panel_color ] in
    let rec loop (state : Intcode.state) (x, y) (dir : direction) =
      let state = Intcode.run_program state in
      match state.output with
      | paint_color :: turn_direction :: rest ->
          Hashtbl.replace panels (x, y) paint_color;
          let new_dir = turn dir turn_direction in
          let new_x, new_y = move (x, y) new_dir in
          let next_input =
            match Hashtbl.find_opt panels (new_x, new_y) with
            | Some color -> color
            | None -> 0
          in
          let next_state = {state with input = [next_input]; output = rest} in
                loop next_state (new_x,new_y) new_dir
      
      | _ -> 
           if state.halted then () 
           else loop {state with input = [match Hashtbl.find_opt panels (x, y) with | Some c -> c | None -> 0]} (x,y) dir
    in
    loop state (0, 0) Up;
    panels
end

let read_program (filename : string) : int array =
  let ic = open_in filename in
  let line = input_line ic in
  close_in ic;
  Array.of_list (List.map int_of_string (String.split_on_char ',' line))

let part1 program =
  let panels = Robot.run_robot (Array.copy program) 0 in
  Hashtbl.length panels

let part2 program =
  let panels = Robot.run_robot (Array.copy program) 1 in
   let min_x = ref 0 in
    let max_x = ref 0 in
    let min_y = ref 0 in
    let max_y = ref 0 in

    Hashtbl.iter (fun (x, y) _ ->
        min_x := min !min_x x;
        max_x := max !max_x x;
        min_y := min !min_y y;
        max_y := max !max_y y;
    ) panels;
  
    for y = !max_y downto !min_y do
        for x = !min_x to !max_x do
            match Hashtbl.find_opt panels (x, y) with
            | Some 1 -> Printf.printf "#"
            | _ -> Printf.printf " "
        done;
        Printf.printf "\n"
    done


let () =
  let program = read_program "input.txt" in
  Printf.printf "Part 1: %d\n" (part1 program);
  Printf.printf "Part 2:\n";
  part2 program
