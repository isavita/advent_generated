
let read_input filename =
  let chan = open_in filename in
  let line = input_line chan in
  close_in chan;
  line

let rock_shapes = [
  [(0,0); (1,0); (2,0); (3,0)];
  [(1,0); (0,1); (1,1); (2,1); (1,2)];
  [(0,0); (1,0); (2,0); (2,1); (2,2)];
  [(0,0); (0,1); (0,2); (0,3)];
  [(0,0); (1,0); (0,1); (1,1)]
]

let can_move rock direction chamber =
  let move_coord (x, y) =
    match direction with
    | 'l' -> (x - 1, y)
    | 'r' -> (x + 1, y)
    | 'd' -> (x, y - 1)
    | _ -> failwith "Invalid direction"
  in
  let moved_rock = List.map move_coord rock in
  let check_valid (x, y) =
    x >= 0 && x <= 6 && y >= 1 && not (Hashtbl.mem chamber (x, y))
  in
  if List.for_all check_valid moved_rock then Some moved_rock else None

let get_chamber_profile chamber highest_y =
  let depth = 30 in
  let rec loop x acc =
    if x > 6 then acc else
      let rec find_y y =
        if y < highest_y - depth then highest_y + 1
        else if Hashtbl.mem chamber (x, y) then highest_y - y
        else find_y (y - 1)
      in
      loop (x + 1) ((find_y highest_y) :: acc)
  in
    List.rev (loop 0 [])
  

let simulate jet_pattern total_rocks =
  let chamber = Hashtbl.create 1000 in
  for x = 0 to 6 do
    Hashtbl.add chamber (x, 0) true
  done;
  let highest_y = ref 0 in
  let jet_len = String.length jet_pattern in
  let jet_index = ref 0 in
  let rock_index = ref 0 in
  let seen_states = Hashtbl.create 100 in
  let additional_height = ref 0 in
  let rock_number = ref 0 in

  while !rock_number < total_rocks do
    let shape = List.nth rock_shapes (!rock_index mod List.length rock_shapes) in
    let rock_x = 2 in
    let rock_y = !highest_y + 4 in
    let rec drop_rock rock =
      let jet_dir = String.get jet_pattern (!jet_index mod jet_len) in
      jet_index := !jet_index + 1;
      let moved_rock =
        match jet_dir with
        | '>' -> can_move rock 'r' chamber
        | '<' -> can_move rock 'l' chamber
        | _ -> failwith "Invalid jet direction"
      in
      let rock = match moved_rock with Some r -> r | None -> rock in
      match can_move rock 'd' chamber with
      | Some moved_down -> drop_rock moved_down
      | None ->
          List.iter (fun (x, y) ->
            Hashtbl.add chamber (x, y) true;
            highest_y := max !highest_y y
          ) rock
    in
    drop_rock (List.map (fun (dx, dy) -> (rock_x + dx, rock_y + dy)) shape);

    let profile = get_chamber_profile chamber !highest_y in
    let state = (!rock_index mod List.length rock_shapes, !jet_index mod jet_len, profile) in

    if Hashtbl.mem seen_states state && !rock_number >= 2022 then (
      let (prev_rock, prev_height) = Hashtbl.find seen_states state in
      let cycle_length = !rock_number - prev_rock in
      let cycle_height = !highest_y - prev_height in
      let remaining_rocks = total_rocks - !rock_number in
      let num_cycles = remaining_rocks / cycle_length in

      additional_height := !additional_height + num_cycles * cycle_height;
      rock_number := !rock_number + num_cycles * cycle_length;
    ) else (
      Hashtbl.add seen_states state (!rock_number, !highest_y)
    );
    rock_number := !rock_number + 1;
    rock_index := !rock_index + 1;
  done;
  !highest_y + !additional_height

let () =
    let jet_pattern = read_input "input.txt" in
    let total_rocks = 1000000000000 in
    let final_height = simulate jet_pattern total_rocks in
    Printf.printf "%d\n" final_height
