
type coord = { x : int; y : int }

type grid = { width : int; height : int; data : (coord, char) Hashtbl.t }

let empty = '.'

let build_grid input empty =
  let grid = Hashtbl.create 10 in
  List.iteri (fun y line ->
    String.iteri (fun x char ->
      if char != empty then Hashtbl.add grid {x; y} char
    ) line
  ) input;
  { width = String.length (List.hd input); height = List.length input; data = grid }

let to_string grid empty =
  let result = Buffer.create 10 in
  for y = 0 to grid.height - 1 do
    for x = 0 to grid.width - 1 do
      let coord = { x; y } in
      if Hashtbl.mem grid.data coord then
        Buffer.add_char result (Hashtbl.find grid.data coord)
      else
        Buffer.add_char result empty
    done;
    Buffer.add_char result '\n'
  done;
  Buffer.contents result

let get_empty_rows grid =
  let empty_rows = ref [] in
  for y = 0 to grid.height - 1 do
    let is_empty = ref true in
    let x = ref 0 in
    while !x < grid.width do
      if Hashtbl.mem grid.data { x = !x; y } then
        is_empty := false;
      incr x
    done;
    if !is_empty then empty_rows := y :: !empty_rows
  done;
  !empty_rows

let get_empty_cols grid =
  let empty_cols = ref [] in
  for x = 0 to grid.width - 1 do
    let is_empty = ref true in
    let y = ref 0 in
    while !y < grid.height do
      if Hashtbl.mem grid.data { x; y = !y } then
        is_empty := false;
      incr y
    done;
    if !is_empty then empty_cols := x :: !empty_cols
  done;
  !empty_cols

let calculate_offsets empty_indexes bound =
  let offsets = Array.make bound 0 in
  List.iter (fun idx ->
    for i = idx + 1 to bound - 1 do
      offsets.(i) <- offsets.(i) + 1
    done
  ) empty_indexes;
  offsets

let expand_grid grid expansion_factor =
  let empty_cols = get_empty_cols grid in
  let empty_rows = get_empty_rows grid in
  let num_lines_to_add = expansion_factor - 1 in
  let new_grid = Hashtbl.create 10 in
  let dxs = calculate_offsets empty_cols grid.width in
  let dys = calculate_offsets empty_rows grid.height in
  for y = 0 to grid.height - 1 do
    for x = 0 to grid.width - 1 do
      let coord = { x; y } in
      if Hashtbl.mem grid.data coord then
        let new_coord = { x = x + dxs.(x) * num_lines_to_add; y = y + dys.(y) * num_lines_to_add } in
        Hashtbl.add new_grid new_coord (Hashtbl.find grid.data coord)
    done
  done;
  { width = grid.width + List.length empty_cols * num_lines_to_add; height = grid.height + List.length empty_rows * num_lines_to_add; data = new_grid }

let abs x = if x < 0 then -x else x

let calculate_length grid c1 c2 =
  let dx = abs (c2.x - c1.x) in
  let dy = abs (c2.y - c1.y) in
  dx + dy

let solve input expansion_factor =
  let grid = build_grid input empty in
  let expanded_grid = expand_grid grid expansion_factor in
  let res = ref 0 in
  let already_seen = Hashtbl.create 10 in
  Hashtbl.iter (fun coord1 _ ->
    Hashtbl.iter (fun coord2 _ ->
      let length = calculate_length expanded_grid coord1 coord2 in
      res := !res + length
    ) already_seen;
    Hashtbl.add already_seen coord1 ()
  ) expanded_grid.data;
  !res

let read_file file_name =
  let lines = ref [] in
  let chan = open_in file_name in
  try
    while true do
      lines := input_line chan :: !lines
    done;
    List.rev !lines
  with End_of_file ->
    close_in chan;
    List.rev !lines

let () =
  let input = read_file "input.txt" in
  print_int (solve input 1000000);
  print_newline ()
