
let read_file filename =
  let ic = open_in filename in
  let lines = In_channel.input_lines ic in
  close_in ic;
  lines

let parse_line line =
  match String.split_on_char ' ' line with
  | [springs_str; groups_str] ->
      let groups = List.map int_of_string (String.split_on_char ',' groups_str) in
      (springs_str, groups)
  | _ -> failwith "Invalid input line format"

let unfold_row (springs, groups) factor =
  if factor <= 0 then (springs, groups)
  else
    let rec build_springs s n = if n = 1 then s else s ^ "?" ^ (build_springs s (n - 1)) in
    let rec build_groups g n = if n = 1 then g else g @ (build_groups g (n - 1)) in
    (build_springs springs factor, build_groups groups factor)

type state = int * int * int

let rec count_arrangements_recursive cache springs groups_arr i_springs i_group i_contiguous_damaged =
  let n_springs = String.length springs in
  let n_groups = Array.length groups_arr in

  let state_key = (i_springs, i_group, i_contiguous_damaged) in
  match Hashtbl.find_opt cache state_key with
  | Some result -> result
  | None ->
      let result =
        if i_springs = n_springs then
          if i_group = n_groups && i_contiguous_damaged = 0 then
            1
          else if i_group = n_groups - 1 && i_contiguous_damaged = groups_arr.(i_group) then
            1
          else
            0
        else
          let res_val = ref 0 in
          let current_char = String.get springs i_springs in

          if current_char = '.' || current_char = '?' then (
            if i_contiguous_damaged = 0 then
              res_val := !res_val + count_arrangements_recursive cache springs groups_arr (i_springs + 1) i_group 0
            else if i_group < n_groups && i_contiguous_damaged = groups_arr.(i_group) then
              res_val := !res_val + count_arrangements_recursive cache springs groups_arr (i_springs + 1) (i_group + 1) 0
          );

          if current_char = '#' || current_char = '?' then (
            if i_group < n_groups && i_contiguous_damaged < groups_arr.(i_group) then
              res_val := !res_val + count_arrangements_recursive cache springs groups_arr (i_springs + 1) i_group (i_contiguous_damaged + 1)
          );

          !res_val
      in
      Hashtbl.add cache state_key result;
      result

let count_arrangements (springs, groups) =
  let cache = Hashtbl.create 10007 in
  let groups_arr = Array.of_list groups in
  count_arrangements_recursive cache springs groups_arr 0 0 0

let () =
  let input_lines = read_file "input.txt" in
  let rows = List.map parse_line input_lines in
  let unfolded_rows = List.map (fun r -> unfold_row r 5) rows in
  let arrangement_counts = List.map count_arrangements unfolded_rows in
  let total_arrangements = List.fold_left (+) 0 arrangement_counts in
  print_int total_arrangements;
  print_newline ()
