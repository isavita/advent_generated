
open Printf

let hex_to_bin hex =
  let bin_of_char c =
    match c with
    | '0' -> "0000"
    | '1' -> "0001"
    | '2' -> "0010"
    | '3' -> "0011"
    | '4' -> "0100"
    | '5' -> "0101"
    | '6' -> "0110"
    | '7' -> "0111"
    | '8' -> "1000"
    | '9' -> "1001"
    | 'A' | 'a' -> "1010"
    | 'B' | 'b' -> "1011"
    | 'C' | 'c' -> "1100"
    | 'D' | 'd' -> "1101"
    | 'E' | 'e' -> "1110"
    | 'F' | 'f' -> "1111"
    | _ -> failwith "Invalid hex character"
  in
  String.fold_left (fun acc c -> acc ^ bin_of_char c) "" hex

let bin_to_int bin = int_of_string ("0b" ^ bin)

type packet =
  | Literal of int * int
  | Operator of int * int * packet list

let rec parse_packet bits =
  let version = bin_to_int (String.sub bits 0 3) in
  let type_id = bin_to_int (String.sub bits 3 3) in
  let remaining_bits = String.sub bits 6 (String.length bits - 6) in
  match type_id with
  | 4 ->
      let rec parse_literal acc bits =
        let prefix = String.sub bits 0 1 in
        let value_bits = String.sub bits 1 4 in
        let remaining_bits = String.sub bits 5 (String.length bits - 5) in
        let acc = acc ^ value_bits in
        if prefix = "0" then (acc, remaining_bits)
        else parse_literal acc remaining_bits
      in
      let value_str, remaining_bits = parse_literal "" remaining_bits in
      let value = bin_to_int value_str in
      (Literal (version, value), remaining_bits)
  | _ ->
      let length_type_id = String.get remaining_bits 0 in
      let remaining_bits = String.sub remaining_bits 1 (String.length remaining_bits - 1) in
      if length_type_id = '0' then
        let length = bin_to_int (String.sub remaining_bits 0 15) in
        let remaining_bits = String.sub remaining_bits 15 (String.length remaining_bits - 15) in
        let sub_packets_bits = String.sub remaining_bits 0 length in
        let remaining_bits = String.sub remaining_bits length (String.length remaining_bits - length) in
        let rec parse_sub_packets acc bits =
          if String.length bits = 0 then (acc, bits)
          else
            let packet, remaining_bits = parse_packet bits in
            parse_sub_packets (packet :: acc) remaining_bits
        in
        let sub_packets, _ = parse_sub_packets [] sub_packets_bits in
        (Operator (version, type_id, List.rev sub_packets), remaining_bits)
      else
        let num_sub_packets = bin_to_int (String.sub remaining_bits 0 11) in
        let remaining_bits = String.sub remaining_bits 11 (String.length remaining_bits - 11) in
        let rec parse_sub_packets acc bits count =
          if count = 0 then (acc, bits)
          else
            let packet, remaining_bits = parse_packet bits in
            parse_sub_packets (packet :: acc) remaining_bits (count - 1)
        in
        let sub_packets, remaining_bits = parse_sub_packets [] remaining_bits num_sub_packets in
        (Operator (version, type_id, List.rev sub_packets), remaining_bits)

let rec sum_versions packet =
  match packet with
  | Literal (version, _) -> version
  | Operator (version, _, sub_packets) ->
      version + List.fold_left (fun acc p -> acc + sum_versions p) 0 sub_packets

let rec evaluate_packet packet =
  match packet with
  | Literal (_, value) -> value
  | Operator (_, type_id, sub_packets) ->
      let sub_values = List.map evaluate_packet sub_packets in
      match type_id with
      | 0 -> List.fold_left (+) 0 sub_values
      | 1 -> List.fold_left ( * ) 1 sub_values
      | 2 -> List.fold_left min (List.hd sub_values) (List.tl sub_values)
      | 3 -> List.fold_left max (List.hd sub_values) (List.tl sub_values)
      | 5 -> if List.nth sub_values 0 > List.nth sub_values 1 then 1 else 0
      | 6 -> if List.nth sub_values 0 < List.nth sub_values 1 then 1 else 0
      | 7 -> if List.nth sub_values 0 = List.nth sub_values 1 then 1 else 0
      | _ -> failwith "Invalid type ID"

let () =
  let input_line =
    let ic = open_in "input.txt" in
    let line = input_line ic in
    close_in ic;
    line
  in
  let binary_string = hex_to_bin input_line in
  let packet, _ = parse_packet binary_string in
  let version_sum = sum_versions packet in
  let result = evaluate_packet packet in
  printf "Part 1: %d\n" version_sum;
  printf "Part 2: %d\n" result
