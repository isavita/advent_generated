const fs = require('fs');

class IntcodeComputer {
    constructor(program) {
        this.memory = program.split(',').map(Number);
        this.pointer = 0;
        this.relativeBase = 0;
    }

    getParam(mode, value) {
        if (mode === 0) return this.memory[value] || 0;
        if (mode === 1) return value;
        if (mode === 2) return this.memory[this.relativeBase + value] || 0;
    }

    setParam(mode, value, result) {
        const index = mode === 2 ? this.relativeBase + value : value;
        this.memory[index] = result;
    }

    run() {
        while (true) {
            const instruction = this.memory[this.pointer];
            const opcode = instruction % 100;
            const modes = [
                Math.floor(instruction / 100) % 10,
                Math.floor(instruction / 1000) % 10,
                Math.floor(instruction / 10000) % 10
            ];

            if (opcode === 99) break;

            const params = [
                this.getParam(modes[0], this.memory[this.pointer + 1]),
                this.getParam(modes[1], this.memory[this.pointer + 2]),
                this.memory[this.pointer + 3]
            ];

            switch (opcode) {
                case 1:
                    this.setParam(modes[2], params[2], params[0] + params[1]);
                    this.pointer += 4;
                    break;
                case 2:
                    this.setParam(modes[2], params[2], params[0] * params[1]);
                    this.pointer += 4;
                    break;
                case 3:
                    console.error('Input not supported for this problem');
                    process.exit(1);
                case 4:
                    this.pointer += 2;
                    return params[0];
                case 5:
                    this.pointer = params[0] !== 0 ? params[1] : this.pointer + 3;
                    break;
                case 6:
                    this.pointer = params[0] === 0 ? params[1] : this.pointer + 3;
                    break;
                case 7:
                    this.setParam(modes[2], params[2], params[0] < params[1] ? 1 : 0);
                    this.pointer += 4;
                    break;
                case 8:
                    this.setParam(modes[2], params[2], params[0] === params[1] ? 1 : 0);
                    this.pointer += 4;
                    break;
                case 9:
                    this.relativeBase += params[0];
                    this.pointer += 2;
                    break;
            }
        }
        return null;
    }
}

function sumAlignmentParameters(scaffoldView) {
    const grid = scaffoldView.trim().split('\n').map(row => row.split(''));
    let sum = 0;

    for (let y = 1; y < grid.length - 1; y++) {
        for (let x = 1; x < grid[y].length - 1; x++) {
            if (grid[y][x] === '#' &&
                grid[y-1][x] === '#' &&
                grid[y+1][x] === '#' &&
                grid[y][x-1] === '#' &&
                grid[y][x+1] === '#') {
                sum += x * y;
            }
        }
    }

    return sum;
}

const input = fs.readFileSync('input.txt', 'utf8').trim();
const computer = new IntcodeComputer(input);

let scaffoldView = '';
let output;
while ((output = computer.run()) !== null) {
    scaffoldView += String.fromCharCode(output);
}

const result = sumAlignmentParameters(scaffoldView);
console.log(result);
