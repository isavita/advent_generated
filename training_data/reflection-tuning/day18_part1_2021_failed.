function add(a, b) {
    return reduce([a, b]);
}

function reduce(num) {
    while (true) {
        let exploded = explode(num);
        if (exploded) continue;
        let split = splitNum(num);
        if (!split) break;
    }
    return num;
}

function explode(num) {
    let path = [];
    return traverse(num, path, 0);
}

function traverse(num, path, depth) {
    if (typeof num === 'number') return false;
    if (depth === 4) {
        explodeNum(num, path);
        return true;
    }
    for (let i = 0; i < 2; i++) {
        path.push(i);
        if (traverse(num[i], path, depth + 1)) return true;
        path.pop();
    }
    return false;
}

function explodeNum(num, path) {
    let left = num[0];
    let right = num[1];
    addLeft(left, path);
    addRight(right, path);
    let parent = getParent(path);
    parent[path[path.length - 1]] = 0;
}

function addLeft(value, path) {
    for (let i = path.length - 1; i >= 0; i--) {
        if (path[i] === 1) {
            if (i > 0) {
                let node = getParent(path.slice(0, i));
                if (typeof node[0] === 'number') {
                    node[0] += value;
                    return;
                } else {
                    node = node[0];
                    while (typeof node[1] !== 'number') {
                        node = node[1];
                    }
                    node[1] += value;
                    return;
                }
            }
            break;
        }
    }
}

function addRight(value, path) {
    for (let i = path.length - 1; i >= 0; i--) {
        if (path[i] === 0) {
            if (i > 0) {
                let node = getParent(path.slice(0, i));
                if (typeof node[1] === 'number') {
                    node[1] += value;
                    return;
                } else {
                    node = node[1];
                    while (typeof node[0] !== 'number') {
                        node = node[0];
                    }
                    node[0] += value;
                    return;
                }
            }
            break;
        }
    }
}

function getParent(path) {
    let node = num;
    for (let i = 0; i < path.length - 1; i++) {
        node = node[path[i]];
    }
    return node;
}

function splitNum(num) {
    if (typeof num === 'number') {
        if (num >= 10) {
            return [Math.floor(num / 2), Math.ceil(num / 2)];
        }
        return null;
    }
    let left = splitNum(num[0]);
    if (left) {
        num[0] = left;
        return true;
    }
    let right = splitNum(num[1]);
    if (right) {
        num[1] = right;
        return true;
    }
    return false;
}

function magnitude(num) {
    if (typeof num === 'number') return num;
    return 3 * magnitude(num[0]) + 2 * magnitude(num[1]);
}

// Example usage
let numbers = [
    [[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]],
    [[[5,[2,8]],4],[5,[[9,9],0]]],
    [6,[[[6,2],[5,6]],[[7,6],[4,7]]]],
    [[[6,[0,7]],[0,9]],[4,[9,[9,0]]]],
    [[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]],
    [[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]],
    [[[[5,4],[7,7]],8],[[8,3],8]],
    [[9,3],[[9,9],[6,[4,9]]]],
    [[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]],
    [[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]
];

let result = numbers.reduce((acc, num) => add(acc, num));
console.log(magnitude(result));
