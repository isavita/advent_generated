To solve this problem efficiently, we can use a circular linked list or an array-based approach. Since the number of Elves can be large, an array-based solution might be more memory-efficient. We can simulate the process by keeping track of the current Elf and the next Elf with presents. We'll remove Elves from the circle by updating the 'next' pointers.

The key observations are:
1. We only need to keep track of Elves with presents.
2. We can use modular arithmetic to wrap around the circle.
3. We can optimize by skipping Elves without presents.

The algorithm will work as follows:
1. Create an array representing the circle of Elves.
2. Iterate until only one Elf remains:
   - Find the next Elf with presents.
   - Transfer presents from the next Elf to the current Elf.
   - Move to the next Elf with presents.
3. Return the position of the last remaining Elf.

This approach has a time complexity of O(n), where n is the number of Elves, and space complexity of O(n) for the array.