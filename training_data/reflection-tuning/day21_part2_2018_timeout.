const fs = require('fs');

function parseInput(input) {
    const lines = input.trim().split('\n');
    const ipRegister = parseInt(lines[0].split(' ')[1]);
    const instructions = lines.slice(1).map(line => {
        const [op, ...params] = line.split(' ');
        return [op, ...params.map(Number)];
    });
    return { ipRegister, instructions };
}

function execute(program, initialR0) {
    const { ipRegister, instructions } = program;
    const registers = [initialR0, 0, 0, 0, 0, 0];
    let ip = 0;
    let steps = 0;

    while (ip >= 0 && ip < instructions.length) {
        registers[ipRegister] = ip;
        const [op, a, b, c] = instructions[ip];
        
        switch (op) {
            case 'addr': registers[c] = registers[a] + registers[b]; break;
            case 'addi': registers[c] = registers[a] + b; break;
            case 'mulr': registers[c] = registers[a] * registers[b]; break;
            case 'muli': registers[c] = registers[a] * b; break;
            case 'banr': registers[c] = registers[a] & registers[b]; break;
            case 'bani': registers[c] = registers[a] & b; break;
            case 'borr': registers[c] = registers[a] | registers[b]; break;
            case 'bori': registers[c] = registers[a] | b; break;
            case 'setr': registers[c] = registers[a]; break;
            case 'seti': registers[c] = a; break;
            case 'gtir': registers[c] = a > registers[b] ? 1 : 0; break;
            case 'gtri': registers[c] = registers[a] > b ? 1 : 0; break;
            case 'gtrr': registers[c] = registers[a] > registers[b] ? 1 : 0; break;
            case 'eqir': registers[c] = a === registers[b] ? 1 : 0; break;
            case 'eqri': registers[c] = registers[a] === b ? 1 : 0; break;
            case 'eqrr': registers[c] = registers[a] === registers[b] ? 1 : 0; break;
        }

        ip = registers[ipRegister];
        ip++;
        steps++;

        if (steps > 1000000) return null; // Avoid infinite loops
    }

    return { halted: true, steps, finalR0: registers[0] };
}

function solvePart1(program) {
    let r0 = 0;
    while (true) {
        const result = execute(program, r0);
        if (result && result.halted) return r0;
        r0++;
    }
}

function solvePart2(program) {
    // After analyzing the program, we find that it's calculating the sum of factors of a large number
    // The number is stored in register 1 after the initial setup
    const result = execute(program, 0);
    if (!result) return "Unable to determine the target number";

    const targetNumber = result.finalR0;
    let sum = 0;
    for (let i = 1; i <= targetNumber; i++) {
        if (targetNumber % i === 0) sum += i;
    }
    return sum;
}

const input = fs.readFileSync('input.txt', 'utf8');
const program = parseInput(input);

console.log("Part 1:", solvePart1(program));
console.log("Part 2:", solvePart2(program));
