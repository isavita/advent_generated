function exploreMap(regex) {
    const stack = [{ x: 0, y: 0, dist: 0, index: 0 }];
    const visited = new Set();
    let maxDist = 0;
    let roomsOver1000 = 0;

    while (stack.length > 0) {
        const { x, y, dist, index } = stack.pop();
        const key = `${x},${y}`;

        if (visited.has(key)) continue;
        visited.add(key);

        maxDist = Math.max(maxDist, dist);
        if (dist >= 1000) roomsOver1000++;

        if (index >= regex.length) continue;

        if ('NESW'.includes(regex[index])) {
            const [dx, dy] = { N: [0, -1], E: [1, 0], S: [0, 1], W: [-1, 0] }[regex[index]];
            stack.push({ x: x + dx, y: y + dy, dist: dist + 1, index: index + 1 });
        } else if (regex[index] === '(') {
            let branchStart = index + 1;
            let branchEnd = findClosingParen(regex, index);
            let branches = splitBranches(regex.slice(branchStart, branchEnd));
            for (let branch of branches) {
                stack.push({ x, y, dist, index: index + branch.length + 2 });
                stack.push({ x, y, dist, index: branchStart });
            }
        } else if (regex[index] === '|' || regex[index] === ')') {
            // Skip these characters
            stack.push({ x, y, dist, index: index + 1 });
        }
    }

    return { maxDist, roomsOver1000 };
}

function findClosingParen(str, start) {
    let count = 1;
    for (let i = start + 1; i < str.length; i++) {
        if (str[i] === '(') count++;
        if (str[i] === ')') count--;
        if (count === 0) return i;
    }
    return -1;
}

function splitBranches(str) {
    let branches = [];
    let current = '';
    let depth = 0;
    for (let char of str) {
        if (char === '(') depth++;
        if (char === ')') depth--;
        if (char === '|' && depth === 0) {
            branches.push(current);
            current = '';
        } else {
            current += char;
        }
    }
    branches.push(current);
    return branches;
}

function solve(input) {
    const regex = input.trim().slice(1, -1); // Remove ^ and $
    const { maxDist, roomsOver1000 } = exploreMap(regex);
    console.log(`Part 1: ${maxDist}`);
    console.log(`Part 2: ${roomsOver1000}`);
}

// Example usage:
const input = "^WSSEESWWWNW(S|NENNEEEENN(ESSSSW(NWSW|SSEN)|WSWWN(E|WWS(E|SS))))$";
solve(input);
