The previous solution seems to have produced incorrect results for both parts of the problem. The main issues I can identify without seeing the code are:

1. The algorithm might not be correctly finding the strongest bridge for Part 1.
2. For Part 2, it's not correctly identifying the longest bridge and then finding the strongest among the longest ones.

To fix these issues, we need to implement a recursive depth-first search (DFS) algorithm that explores all possible bridges. For Part 1, we'll keep track of the maximum strength encountered. For Part 2, we'll first find the maximum length, and then among the bridges with that length, find the one with the maximum strength.

The key improvements would be:
- Implement a proper DFS function that builds bridges recursively.
- Keep track of used components to avoid reusing them.
- For Part 2, use a two-pass approach: first to find the max length, then to find the strongest among the longest.