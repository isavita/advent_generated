To solve this problem efficiently, we can use a hash to keep track of the pair counts instead of generating the actual polymer string. This approach will be much more memory-efficient and faster, especially for larger numbers of steps.

Here's the approach:
1. Parse the input file to get the template and rules.
2. Initialize a hash with the initial pair counts from the template.
3. For each step:
   - Create a new hash for the next generation of pairs.
   - For each existing pair, apply the rules and update the counts in the new hash.
4. After all steps, count the occurrences of each element.
5. Find the most and least common elements and calculate the difference.

This approach has a time complexity of O(n * s), where n is the number of unique pairs and s is the number of steps, which is much more efficient than generating the actual polymer string.