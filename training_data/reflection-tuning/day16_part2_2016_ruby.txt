To solve this problem efficiently, we need to focus on a few key points:

1. Generating the data: We can use string manipulation to generate the data according to the dragon curve rules. We'll continue this process until we have enough data to fill the disk.

2. Calculating the checksum: We need to implement the checksum calculation process, which involves pairing characters and reducing the string until we get an odd-length checksum.

3. Optimization: For Part Two, generating the full string and then calculating the checksum might be memory-intensive. Instead, we can generate the data on-the-fly and calculate the checksum in chunks.

4. Efficiency: We'll use bitwise operations where possible to speed up the process, especially for the large disk in Part Two.

The approach will be:
1. Read the input from the file.
2. Implement a function to generate data using the dragon curve.
3. Implement a function to calculate the checksum.
4. Solve Part One using these functions.
5. For Part Two, modify the approach to work with chunks of data to avoid memory issues.