To solve this problem, we need to approach it in two parts:

1. For Part 1:
   - We'll create a function to calculate the geologic index and erosion level for each region.
   - We'll then calculate the risk level for the rectangle from (0,0) to the target.

2. For Part 2:
   - We'll use a modified Dijkstra's algorithm to find the shortest path.
   - We'll represent each state as a combination of position and equipped tool.
   - We'll use a priority queue to efficiently select the next state to explore.
   - We'll keep track of the minimum time to reach each state and update it as we explore.

The main challenge is to efficiently implement the path-finding algorithm for Part 2, as the search space can be quite large. We'll use a binary heap for the priority queue to improve performance.