function runIntcode(program, inputs) {
    let memory = [...program];
    let ip = 0;
    let relativeBase = 0;
    let inputIndex = 0;
    let output = null;

    function getParam(mode, value) {
        if (mode === 0) return memory[value] || 0;
        if (mode === 1) return value;
        if (mode === 2) return memory[relativeBase + value] || 0;
    }

    function setParam(mode, value, result) {
        if (mode === 0) memory[value] = result;
        if (mode === 2) memory[relativeBase + value] = result;
    }

    while (true) {
        let instruction = memory[ip];
        let opcode = instruction % 100;
        let modes = [
            Math.floor(instruction / 100) % 10,
            Math.floor(instruction / 1000) % 10,
            Math.floor(instruction / 10000) % 10
        ];

        if (opcode === 99) break;

        let params = [
            getParam(modes[0], memory[ip + 1] || 0),
            getParam(modes[1], memory[ip + 2] || 0),
            modes[2] === 2 ? relativeBase + (memory[ip + 3] || 0) : (memory[ip + 3] || 0)
        ];

        switch (opcode) {
            case 1: // Add
                setParam(modes[2], params[2], params[0] + params[1]);
                ip += 4;
                break;
            case 2: // Multiply
                setParam(modes[2], params[2], params[0] * params[1]);
                ip += 4;
                break;
            case 3: // Input
                setParam(modes[0], memory[ip + 1], inputs[inputIndex++]);
                ip += 2;
                break;
            case 4: // Output
                output = params[0];
                ip += 2;
                return output;
            case 5: // Jump-if-true
                ip = params[0] !== 0 ? params[1] : ip + 3;
                break;
            case 6: // Jump-if-false
                ip = params[0] === 0 ? params[1] : ip + 3;
                break;
            case 7: // Less than
                setParam(modes[2], params[2], params[0] < params[1] ? 1 : 0);
                ip += 4;
                break;
            case 8: // Equals
                setParam(modes[2], params[2], params[0] === params[1] ? 1 : 0);
                ip += 4;
                break;
            case 9: // Adjust relative base
                relativeBase += params[0];
                ip += 2;
                break;
        }
    }
    return output;
}

function countAffectedPoints(program, size) {
    let count = 0;
    for (let y = 0; y < size; y++) {
        for (let x = 0; x < size; x++) {
            if (runIntcode([...program], [x, y]) === 1) {
                count++;
            }
        }
    }
    return count;
}

function findSquare(program, squareSize) {
    let x = 0, y = 100;
    while (true) {
        if (runIntcode([...program], [x, y]) === 1) {
            if (runIntcode([...program], [x + squareSize - 1, y - squareSize + 1]) === 1) {
                return { x, y: y - squareSize + 1 };
            }
            y++;
        } else {
            x++;
        }
    }
}

// Assuming the Intcode program is provided as an array of integers
const program = [/* ... Intcode program here ... */];

// Part 1
console.log("Part 1:", countAffectedPoints(program, 50));

// Part 2
const { x, y } = findSquare(program, 100);
console.log("Part 2:", x * 10000 + y);
