function shortestPathAllKeys(grid) {
    const rows = grid.length;
    const cols = grid[0].length;
    let allKeys = 0;
    let starts = [];

    // Find all keys and starting positions
    for (let i = 0; i < rows; i++) {
        for (let j = 0; j < cols; j++) {
            if (grid[i][j] >= 'a' && grid[i][j] <= 'f') {
                allKeys |= (1 << (grid[i][j].charCodeAt(0) - 97));
            }
            if (grid[i][j] === '@') {
                starts.push([i, j]);
            }
        }
    }

    // BFS
    const queue = [[starts, 0, 0]]; // [positions, steps, collectedKeys]
    const visited = new Set();
    const dirs = [[-1, 0], [1, 0], [0, -1], [0, 1]];

    while (queue.length > 0) {
        queue.sort((a, b) => a[1] - b[1]); // Sort by steps (priority)
        const [positions, steps, keys] = queue.shift();

        if (keys === allKeys) return steps;

        const state = positions.map(p => p.join(',')).join('|') + '|' + keys;
        if (visited.has(state)) continue;
        visited.add(state);

        for (let r = 0; r < positions.length; r++) {
            const [i, j] = positions[r];
            for (const [di, dj] of dirs) {
                const ni = i + di, nj = j + dj;
                if (ni < 0 || ni >= rows || nj < 0 || nj >= cols || grid[ni][nj] === '#') continue;
                const cell = grid[ni][nj];
                if (cell >= 'A' && cell <= 'F' && !(keys & (1 << (cell.charCodeAt(0) - 65)))) continue;

                let newKeys = keys;
                if (cell >= 'a' && cell <= 'f') {
                    newKeys |= (1 << (cell.charCodeAt(0) - 97));
                }

                const newPositions = positions.map((p, index) => index === r ? [ni, nj] : p);
                queue.push([newPositions, steps + 1, newKeys]);
            }
        }
    }

    return -1; // No solution found
}

// Part 1
function solvePart1(input) {
    return shortestPathAllKeys(input.split('\n'));
}

// Part 2
function solvePart2(input) {
    const grid = input.split('\n');
    const center = [Math.floor(grid.length / 2), Math.floor(grid[0].length / 2)];
    
    grid[center[0] - 1] = grid[center[0] - 1].slice(0, center[1] - 1) + '@#@' + grid[center[0] - 1].slice(center[1] + 2);
    grid[center[0]] = grid[center[0]].slice(0, center[1] - 1) + '###' + grid[center[0]].slice(center[1] + 2);
    grid[center[0] + 1] = grid[center[0] + 1].slice(0, center[1] - 1) + '@#@' + grid[center[0] + 1].slice(center[1] + 2);

    return shortestPathAllKeys(grid);
}

// Example usage
const input = `#######
#a.#Cd#
##...##
##.@.##
##...##
#cB#Ab#
#######`;

console.log("Part 1:", solvePart1(input));
console.log("Part 2:", solvePart2(input));
