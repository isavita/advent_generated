(define (read-input filename)
  (with-input-from-file filename
    (lambda ()
      (let loop ((lines '()))
        (let ((line (read)))
          (if (eof-object? line)
              (reverse lines)
              (loop (cons line lines))))))))

(define (count-arrangements adapters)
  (define sorted-adapters (sort adapters <))
  (define max-joltage (+ (apply max sorted-adapters) 3))
  (define all-adapters (cons 0 (append sorted-adapters (list max-joltage))))
  (define n (length all-adapters))
  (define dp (make-vector n 0))
  (vector-set! dp 0 1)
  (do ((i 1 (+ i 1)))
      ((= i n))
    (do ((j (- i 1) (- j 1)))
        ((or (< j 0) (> (- (list-ref all-adapters i) (list-ref all-adapters j)) 3)))
      (vector-set! dp i (+ (vector-ref dp i) (vector-ref dp j)))))
  (vector-ref dp (- n 1)))

(define (main)
  (let ((adapters (read-input "input.txt")))
    (display (count-arrangements adapters))
    (newline)))

(main)