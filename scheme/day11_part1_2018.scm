(define (hundreds-digit n)
  (if (< n 100) 0 (modulo (quotient n 100) 10)))

(define (power-level x y serial)
  (let* ((rack-id (+ x 10))
         (power (* rack-id y))
         (power (+ power serial))
         (power (* power rack-id))
         (hundreds (hundreds-digit power)))
    (- hundreds 5)))

(define (max-power-square serial)
  (let ((max-power -inf.0)
        (max-x 0)
        (max-y 0))
    (do ((x 1 (+ x 1)))
        ((> x 298))
      (do ((y 1 (+ y 1)))
          ((> y 298))
        (let ((total-power 0))
          (do ((dx 0 (+ dx 1)))
              ((= dx 3))
            (do ((dy 0 (+ dy 1)))
                ((= dy 3))
              (set! total-power (+ total-power (power-level (+ x dx) (+ y dy) serial)))))
          (when (> total-power max-power)
            (set! max-power total-power)
            (set! max-x x)
            (set! max-y y)))))
    (list max-x max-y)))

(define (main)
  (let ((serial (with-input-from-file "input.txt"
                  (lambda () (read)))))
    (let ((result (max-power-square serial)))
      (display (car result))
      (display ",")
      (display (cadr result))
      (newline))))

(main)