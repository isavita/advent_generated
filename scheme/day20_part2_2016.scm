
(define (parse-range line)
  (let ((parts (string-split line "-")))
    (list (string->number (car parts)) (string->number (cadr parts)))))

(define (read-ranges filename)
  (with-input-from-file filename
    (lambda ()
      (let loop ((lines (read-line)))
        (if (eof-object? lines)
            '()
            (cons (parse-range lines) (loop (read-line))))))))

(define (merge-ranges ranges)
  (let ((sorted-ranges (sort ranges < (lambda (r) (car r)))))
    (let loop ((current-range (car sorted-ranges)) (remaining-ranges (cdr sorted-ranges)) (merged-ranges '()))
      (if (null? remaining-ranges)
          (reverse (cons current-range merged-ranges))
          (let ((next-range (car remaining-ranges)))
            (if (<= (cadr current-range) (car next-range))
                (loop next-range (cdr remaining-ranges) (cons current-range merged-ranges))
                (let ((new-range (list (min (car current-range) (car next-range))
                                       (max (cadr current-range) (cadr next-range)))))
                  (loop new-range (cdr remaining-ranges) merged-ranges))))))))

(define (find-lowest-allowed ranges)
  (if (null? ranges)
      0
      (if (= 0 (car (car ranges)))
          (if (null? (cdr ranges))
              (+ 1 (cadr (car ranges)))
              (if (< (+ 1 (cadr (car ranges))) (car (cadr ranges)))
                  (+ 1 (cadr (car ranges)))
                  (find-lowest-allowed (cdr ranges))))
          0)))

(define (count-allowed ranges max-ip)
  (let loop ((current-ip 0) (remaining-ranges ranges) (count 0))
    (if (> current-ip max-ip)
        count
        (if (null? remaining-ranges)
            (+ count (- max-ip current-ip 1))
            (let ((current-range (car remaining-ranges)))
              (if (>= current-ip (car current-range))
                  (if (>= current-ip (cadr current-range))
                      (loop current-ip (cdr remaining-ranges) count)
                      (loop (+ 1 (cadr current-range)) (cdr remaining-ranges) count))
                  (loop (car current-range) remaining-ranges (+ count (- (car current-range) current-ip)))))))))

(define (main)
  (let* ((ranges (read-ranges "input.txt"))
         (merged-ranges (merge-ranges ranges))
         (lowest-allowed (find-lowest-allowed merged-ranges))
         (allowed-count (count-allowed merged-ranges 4294967295)))
    (display "Lowest allowed IP: ")
    (display lowest-allowed)
    (newline)
    (display "Number of allowed IPs: ")
    (display allowed-count)
    (newline)))

(main)
