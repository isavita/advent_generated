(define (read-input filename)
  (with-input-from-file filename
    (lambda ()
      (let loop ((lines '()))
        (let ((line (read-line)))
          (if (eof-object? line)
              (reverse lines)
              (loop (cons line lines))))))))

(define (char-counts lines)
  (let ((length (string-length (car lines))))
    (define (count-column col)
      (let ((counts (make-vector 26 0)))
        (for-each (lambda (line)
                    (let ((char (string-ref line col)))
                      (when (and (char? char) (char>=? char #\a) (char<=? char #\z))
                        (vector-set! counts (- (char->integer char) (char->integer #\a))
                                     (+ 1 (vector-ref counts (- (char->integer char) (char->integer #\a))))))))
                  lines)
        counts))
    (map (lambda (col) (count-column col)) (iota length))))

(define (most-common counts)
  (map (lambda (count-vector)
         (let loop ((i 0) (max-count 0) (max-char #\a))
           (if (< i 26)
               (let ((current-count (vector-ref count-vector i)))
                 (if (> current-count max-count)
                     (loop (+ i 1) current-count (integer->char (+ i (char->integer #\a))))
                     (loop (+ i 1) max-count max-char)))
               max-char)))
       counts))

(define (least-common counts)
  (map (lambda (count-vector)
         (let loop ((i 0) (min-count +inf.0) (min-char #\a))
           (if (< i 26)
               (let ((current-count (vector-ref count-vector i)))
                 (if (< current-count min-count)
                     (loop (+ i 1) current-count (integer->char (+ i (char->integer #\a))))
                     (loop (+ i 1) min-count min-char)))
               min-char)))
       counts))

(define (main)
  (let* ((lines (read-input "input.txt"))
         (counts (char-counts lines))
         (message-most (list->string (most-common counts)))
         (message-least (list->string (least-common counts))))
    (display "Most common message: ")
    (display message-most)
    (newline)
    (display "Least common message: ")
    (display message-least)
    (newline)))

(main)